{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { useRef } from \"react\";\nimport { equal } from \"@wry/equality\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nexport function useFragment_experimental(options) {\n  var cache = useApolloClient().cache;\n\n  var fragment = options.fragment,\n      fragmentName = options.fragmentName,\n      from = options.from,\n      _a = options.optimistic,\n      optimistic = _a === void 0 ? true : _a,\n      rest = __rest(options, [\"fragment\", \"fragmentName\", \"from\", \"optimistic\"]);\n\n  var diffOptions = __assign(__assign({}, rest), {\n    id: typeof from === \"string\" ? from : cache.identify(from),\n    query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n    optimistic: optimistic\n  });\n\n  var resultRef = useRef();\n  var latestDiff = cache.diff(diffOptions);\n\n  var getSnapshot = function () {\n    var latestDiffToResult = diffToResult(latestDiff);\n    return resultRef.current && equal(resultRef.current.data, latestDiffToResult.data) ? resultRef.current : resultRef.current = latestDiffToResult;\n  };\n\n  return useSyncExternalStore(function (forceUpdate) {\n    return cache.watch(__assign(__assign({}, diffOptions), {\n      immediate: true,\n      callback: function (diff) {\n        if (!equal(diff, latestDiff)) {\n          resultRef.current = diffToResult(latestDiff = diff);\n          forceUpdate();\n        }\n      }\n    }));\n  }, getSnapshot, getSnapshot);\n}\n\nfunction diffToResult(diff) {\n  var result = {\n    data: diff.result,\n    complete: !!diff.complete\n  };\n\n  if (diff.missing) {\n    result.missing = mergeDeepArray(diff.missing.map(function (error) {\n      return error.missing;\n    }));\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../../../src/react/hooks/useFragment.ts"],"names":[],"mappings":";AAAA,SAAS,MAAT,QAAuB,OAAvB;AACA,SAAS,KAAT,QAAsB,eAAtB;AAEA,SAAS,cAAT,QAA+B,0BAA/B;AAQA,SAAS,eAAT,QAAgC,sBAAhC;AACA,SAAS,oBAAT,QAAqC,2BAArC;AAuCA,OAAM,SAAU,wBAAV,CAIJ,OAJI,EAIqC;AAEjC,MAAA,KAAK,GAAK,eAAe,GAApB,KAAL;;AAGN,MAAA,QAAQ,GAKN,OAAO,CALD,QAAR;AAAA,MACA,YAAY,GAIV,OAAO,CAJG,YADZ;AAAA,MAEA,IAAI,GAGF,OAAO,CAHL,IAFJ;AAAA,MAGA,EAAA,GAEE,OAAO,CAFQ,UAHjB;AAAA,MAGA,UAAU,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAH,GAAO,EAHjB;AAAA,MAIG,IAAI,GAAA,MAAA,CACL,OADK,EALH,CAAA,UAAA,EAAA,cAAA,EAAA,MAAA,EAAA,YAAA,CAKG,CAJP;;AAOF,MAAM,WAAW,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACZ,IADY,CAAA,EACR;AACP,IAAA,EAAE,EAAE,OAAO,IAAP,KAAgB,QAAhB,GAA2B,IAA3B,GAAkC,KAAK,CAAC,QAAN,CAAe,IAAf,CAD/B;AAEP,IAAA,KAAK,EAAE,KAAK,CAAC,gBAAD,CAAL,CAAwB,QAAxB,EAAkC,YAAlC,CAFA;AAGP,IAAA,UAAU,EAAA;AAHH,GADQ,CAAjB;;AAOA,MAAM,SAAS,GAAG,MAAM,EAAxB;AACA,MAAI,UAAU,GAAG,KAAK,CAAC,IAAN,CAAkB,WAAlB,CAAjB;;AAGA,MAAM,WAAW,GAAG,YAAA;AAClB,QAAM,kBAAkB,GAAG,YAAY,CAAC,UAAD,CAAvC;AACA,WAAO,SAAS,CAAC,OAAV,IACL,KAAK,CAAC,SAAS,CAAC,OAAV,CAAkB,IAAnB,EAAyB,kBAAkB,CAAC,IAA5C,CADA,GAEH,SAAS,CAAC,OAFP,GAGF,SAAS,CAAC,OAAV,GAAoB,kBAHzB;AAID,GAND;;AAQA,SAAO,oBAAoB,CACzB,UAAC,WAAD,EAAY;AACV,WAAO,KAAK,CAAC,KAAN,CAAW,QAAA,CAAA,QAAA,CAAA,EAAA,EACb,WADa,CAAA,EACF;AACd,MAAA,SAAS,EAAE,IADG;AAEd,MAAA,QAAQ,EAAA,UAAC,IAAD,EAAK;AACX,YAAI,CAAC,KAAK,CAAC,IAAD,EAAO,UAAP,CAAV,EAA8B;AAC5B,UAAA,SAAS,CAAC,OAAV,GAAoB,YAAY,CAAE,UAAU,GAAG,IAAf,CAAhC;AACA,UAAA,WAAW;AACZ;AACF;AAPa,KADE,CAAX,CAAP;AAUD,GAZwB,EAazB,WAbyB,EAczB,WAdyB,CAA3B;AAgBD;;AAED,SAAS,YAAT,CACE,IADF,EAC+B;AAE7B,MAAM,MAAM,GAA6B;AACvC,IAAA,IAAI,EAAE,IAAI,CAAC,MAD4B;AAEvC,IAAA,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC;AAFsB,GAAzC;;AAKA,MAAI,IAAI,CAAC,OAAT,EAAkB;AAChB,IAAA,MAAM,CAAC,OAAP,GAAiB,cAAc,CAC7B,IAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,UAAA,KAAA,EAAK;AAAI,aAAA,KAAK,CAAL,OAAA;AAAa,KAAvC,CAD6B,CAA/B;AAGD;;AAED,SAAO,MAAP;AACD","sourcesContent":["import { useRef } from \"react\";\nimport { equal } from \"@wry/equality\";\n\nimport { mergeDeepArray } from \"../../utilities\";\nimport {\n  Cache,\n  Reference,\n  StoreObject,\n  MissingTree,\n} from \"../../cache\";\n\nimport { useApolloClient } from \"./useApolloClient\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore\";\nimport { OperationVariables } from \"../../core\";\n\nexport interface UseFragmentOptions<TData, TVars>\nextends Omit<\n  Cache.DiffOptions<TData, TVars>,\n  | \"id\"\n  | \"query\"\n  | \"optimistic\"\n  | \"previousResult\"\n>, Omit<\n  Cache.ReadFragmentOptions<TData, TVars>,\n  | \"id\"\n> {\n  from: StoreObject | Reference | string;\n  // Override this field to make it optional (default: true).\n  optimistic?: boolean;\n}\n\n// Since the above definition of UseFragmentOptions can be hard to parse without\n// help from TypeScript/VSCode, here are the intended fields and their types.\n// Uncomment this code to check that it's consistent with the definition above.\n//\n// export interface UseFragmentOptions<TData, TVars> {\n//   from: string | StoreObject | Reference;\n//   fragment: DocumentNode | TypedDocumentNode<TData, TVars>;\n//   fragmentName?: string;\n//   optimistic?: boolean;\n//   variables?: TVars;\n//   returnPartialData?: boolean;\n//   canonizeResults?: boolean;\n// }\n\nexport interface UseFragmentResult<TData> {\n  data: TData | undefined;\n  complete: boolean;\n  missing?: MissingTree;\n}\n\nexport function useFragment_experimental<\n  TData = any,\n  TVars = OperationVariables\n>(\n  options: UseFragmentOptions<TData, TVars>,\n): UseFragmentResult<TData> {\n  const { cache } = useApolloClient();\n\n  const {\n    fragment,\n    fragmentName,\n    from,\n    optimistic = true,\n    ...rest\n  } = options;\n\n  const diffOptions: Cache.DiffOptions<TData, TVars> = {\n    ...rest,\n    id: typeof from === \"string\" ? from : cache.identify(from),\n    query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n    optimistic,\n  };\n\n  const resultRef = useRef<UseFragmentResult<TData>>();\n  let latestDiff = cache.diff<TData>(diffOptions);\n\n  // Used for both getSnapshot and getServerSnapshot\n  const getSnapshot = () => {\n    const latestDiffToResult = diffToResult(latestDiff);\n    return resultRef.current &&\n      equal(resultRef.current.data, latestDiffToResult.data)\n      ? resultRef.current\n      : (resultRef.current = latestDiffToResult);\n  };\n\n  return useSyncExternalStore(\n    (forceUpdate) => {\n      return cache.watch({\n        ...diffOptions,\n        immediate: true,\n        callback(diff) {\n          if (!equal(diff, latestDiff)) {\n            resultRef.current = diffToResult((latestDiff = diff));\n            forceUpdate();\n          }\n        },\n      });\n    },\n    getSnapshot,\n    getSnapshot\n  );\n}\n\nfunction diffToResult<TData>(\n  diff: Cache.DiffResult<TData>,\n): UseFragmentResult<TData> {\n  const result: UseFragmentResult<TData> = {\n    data: diff.result,\n    complete: !!diff.complete,\n  };\n\n  if (diff.missing) {\n    result.missing = mergeDeepArray(\n      diff.missing.map(error => error.missing),\n    );\n  }\n\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}