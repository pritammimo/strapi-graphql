{"ast":null,"code":"import { isNonEmptyArray } from \"./arrays.js\";\nimport { isExecutionPatchIncrementalResult } from \"./incrementalResult.js\";\nexport function graphQLResultHasError(result) {\n  var errors = getGraphQLErrorsFromResult(result);\n  return isNonEmptyArray(errors);\n}\nexport function getGraphQLErrorsFromResult(result) {\n  var graphQLErrors = isNonEmptyArray(result.errors) ? result.errors.slice(0) : [];\n\n  if (isExecutionPatchIncrementalResult(result) && isNonEmptyArray(result.incremental)) {\n    result.incremental.forEach(function (incrementalResult) {\n      if (incrementalResult.errors) {\n        graphQLErrors.push.apply(graphQLErrors, incrementalResult.errors);\n      }\n    });\n  }\n\n  return graphQLErrors;\n}","map":{"version":3,"sources":["../../../src/utilities/common/errorHandling.ts"],"names":[],"mappings":"AACA,SAAS,eAAT,QAAgC,aAAhC;AACA,SAAS,iCAAT,QAAkD,wBAAlD;AAEA,OAAM,SAAU,qBAAV,CAAmC,MAAnC,EAAyD;AAC7D,MAAM,MAAM,GAAG,0BAA0B,CAAC,MAAD,CAAzC;AACA,SAAO,eAAe,CAAC,MAAD,CAAtB;AACD;AAED,OAAM,SAAU,0BAAV,CAAwC,MAAxC,EAA8D;AAClE,MAAM,aAAa,GAAG,eAAe,CAAC,MAAM,CAAC,MAAR,CAAf,GAClB,MAAM,CAAC,MAAP,CAAc,KAAd,CAAoB,CAApB,CADkB,GAElB,EAFJ;;AAIA,MACE,iCAAiC,CAAC,MAAD,CAAjC,IACA,eAAe,CAAC,MAAM,CAAC,WAAR,CAFjB,EAGE;AACA,IAAA,MAAM,CAAC,WAAP,CAAmB,OAAnB,CAA2B,UAAC,iBAAD,EAAkB;AAC3C,UAAI,iBAAiB,CAAC,MAAtB,EAA8B;AAC5B,QAAA,aAAa,CAAC,IAAd,CAAkB,KAAlB,CAAA,aAAA,EAAsB,iBAAiB,CAAC,MAAxC;AACD;AACF,KAJD;AAKD;;AACD,SAAO,aAAP;AACD","sourcesContent":["import { FetchResult } from \"../../link/core\";\nimport { isNonEmptyArray } from \"../../utilities/common/arrays\";\nimport { isExecutionPatchIncrementalResult } from \"../../utilities/common/incrementalResult\";\n\nexport function graphQLResultHasError<T>(result: FetchResult<T>): boolean {\n  const errors = getGraphQLErrorsFromResult(result);\n  return isNonEmptyArray(errors);\n}\n\nexport function getGraphQLErrorsFromResult<T>(result: FetchResult<T>) {\n  const graphQLErrors = isNonEmptyArray(result.errors)\n    ? result.errors.slice(0)\n    : [];\n\n  if (\n    isExecutionPatchIncrementalResult(result) &&\n    isNonEmptyArray(result.incremental)\n  ) {\n    result.incremental.forEach((incrementalResult) => {\n      if (incrementalResult.errors) {\n        graphQLErrors.push(...incrementalResult.errors);\n      }\n    });\n  }\n  return graphQLErrors;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}