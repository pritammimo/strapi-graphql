{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { mergeOptions } from \"../../core/index.js\";\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nexport function useMutation(mutation, options) {\n  var client = useApolloClient(options === null || options === void 0 ? void 0 : options.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n\n  var _a = useState({\n    called: false,\n    loading: false,\n    client: client\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var ref = useRef({\n    result: result,\n    mutationId: 0,\n    isMounted: true,\n    client: client,\n    mutation: mutation,\n    options: options\n  });\n  {\n    Object.assign(ref.current, {\n      client: client,\n      options: options,\n      mutation: mutation\n    });\n  }\n  var execute = useCallback(function (executeOptions) {\n    if (executeOptions === void 0) {\n      executeOptions = {};\n    }\n\n    var _a = ref.current,\n        options = _a.options,\n        mutation = _a.mutation;\n\n    var baseOptions = __assign(__assign({}, options), {\n      mutation: mutation\n    });\n\n    var client = executeOptions.client || ref.current.client;\n\n    if (!ref.current.result.loading && !baseOptions.ignoreResults && ref.current.isMounted) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client: client\n      });\n    }\n\n    var mutationId = ++ref.current.mutationId;\n    var clientOptions = mergeOptions(baseOptions, executeOptions);\n    return client.mutate(clientOptions).then(function (response) {\n      var _a;\n\n      var data = response.data,\n          errors = response.errors;\n      var error = errors && errors.length > 0 ? new ApolloError({\n        graphQLErrors: errors\n      }) : void 0;\n\n      if (mutationId === ref.current.mutationId && !clientOptions.ignoreResults) {\n        var result_1 = {\n          called: true,\n          loading: false,\n          data: data,\n          error: error,\n          client: client\n        };\n\n        if (ref.current.isMounted && !equal(ref.current.result, result_1)) {\n          setResult(ref.current.result = result_1);\n        }\n      }\n\n      var onCompleted = executeOptions.onCompleted || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onCompleted);\n      onCompleted === null || onCompleted === void 0 ? void 0 : onCompleted(response.data, clientOptions);\n      return response;\n    }).catch(function (error) {\n      var _a;\n\n      if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n        var result_2 = {\n          loading: false,\n          error: error,\n          data: void 0,\n          called: true,\n          client: client\n        };\n\n        if (!equal(ref.current.result, result_2)) {\n          setResult(ref.current.result = result_2);\n        }\n      }\n\n      var onError = executeOptions.onError || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError);\n\n      if (onError) {\n        onError(error, clientOptions);\n        return {\n          data: void 0,\n          errors: error\n        };\n      }\n\n      throw error;\n    });\n  }, []);\n  var reset = useCallback(function () {\n    if (ref.current.isMounted) {\n      setResult({\n        called: false,\n        loading: false,\n        client: client\n      });\n    }\n  }, []);\n  useEffect(function () {\n    ref.current.isMounted = true;\n    return function () {\n      ref.current.isMounted = false;\n    };\n  }, []);\n  return [execute, __assign({\n    reset: reset\n  }, result)];\n}","map":{"version":3,"sources":["../../../src/react/hooks/useMutation.ts"],"names":[],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n} from '../types/types';\n\nimport {\n  ApolloCache,\n  DefaultContext,\n  mergeOptions,\n  OperationVariables,\n} from '../../core';\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext, TCache>,\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = useState<Omit<MutationResult, 'reset'>>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  // TODO: Trying to assign these in a useEffect or useLayoutEffect breaks\n  // higher-order components.\n  {\n    Object.assign(ref.current, { client, options, mutation });\n  }\n\n  const execute = useCallback((\n    executeOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {}\n  ) => {\n    const {options, mutation} = ref.current;\n    const baseOptions = { ...options, mutation };\n    const client = executeOptions.client || ref.current.client;\n\n    if (!ref.current.result.loading && !baseOptions.ignoreResults && ref.current.isMounted) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client,\n      });\n    }\n\n    const mutationId = ++ref.current.mutationId;\n    const clientOptions = mergeOptions(\n      baseOptions,\n      executeOptions as any,\n    );\n\n    return client.mutate(clientOptions).then((response) => {\n      const { data, errors } = response;\n      const error =\n        errors && errors.length > 0\n          ? new ApolloError({ graphQLErrors: errors })\n          : void 0;\n\n      if (\n        mutationId === ref.current.mutationId &&\n        !clientOptions.ignoreResults\n      ) {\n        const result = {\n          called: true,\n          loading: false,\n          data,\n          error,\n          client,\n        };\n\n        if (ref.current.isMounted && !equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      const onCompleted = executeOptions.onCompleted || ref.current.options?.onCompleted\n      onCompleted?.(response.data!, clientOptions);\n\n      return response;\n    }).catch((error) => {\n      if (\n        mutationId === ref.current.mutationId &&\n        ref.current.isMounted\n      ) {\n        const result = {\n          loading: false,\n          error,\n          data: void 0,\n          called: true,\n          client,\n        };\n\n        if (!equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      const onError = executeOptions.onError || ref.current.options?.onError\n\n      if (onError) {\n        onError(error, clientOptions);\n\n        // TODO(brian): why are we returning this here???\n        return { data: void 0, errors: error };\n      }\n\n      throw error;\n    });\n  }, []);\n\n  const reset = useCallback(() => {\n    if (ref.current.isMounted) {\n      setResult({ called: false, loading: false, client });\n    }\n  }, []);\n\n  useEffect(() => {\n    ref.current.isMounted = true;\n\n    return () => {\n      ref.current.isMounted = false;\n    };\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}