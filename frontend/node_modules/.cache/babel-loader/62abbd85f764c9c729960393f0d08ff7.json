{"ast":null,"code":"import { isAsyncIterableIterator, isBlob, isNodeResponse, isNodeReadableStream, isReadableStream, isStreamableBlob } from \"../../utilities/common/responseIterator.js\";\nimport asyncIterator from \"./iterators/async.js\";\nimport nodeStreamIterator from \"./iterators/nodeStream.js\";\nimport promiseIterator from \"./iterators/promise.js\";\nimport readerIterator from \"./iterators/reader.js\";\nexport function responseIterator(response) {\n  var body = response;\n  if (isNodeResponse(response)) body = response.body;\n  if (isAsyncIterableIterator(body)) return asyncIterator(body);\n  if (isReadableStream(body)) return readerIterator(body.getReader());\n\n  if (isStreamableBlob(body)) {\n    return readerIterator(body.stream().getReader());\n  }\n\n  if (isBlob(body)) return promiseIterator(body.arrayBuffer());\n  if (isNodeReadableStream(body)) return nodeStreamIterator(body);\n  throw new Error(\"Unknown body type for responseIterator. Please pass a streamable response.\");\n}","map":{"version":3,"sources":["../../../src/link/http/responseIterator.ts"],"names":[],"mappings":"AAMA,SACE,uBADF,EAEE,MAFF,EAGE,cAHF,EAIE,oBAJF,EAKE,gBALF,EAME,gBANF,QAOO,4CAPP;AASA,OAAO,aAAP,MAA0B,sBAA1B;AACA,OAAO,kBAAP,MAA+B,2BAA/B;AACA,OAAO,eAAP,MAA4B,wBAA5B;AACA,OAAO,cAAP,MAA2B,uBAA3B;AAEA,OAAM,SAAU,gBAAV,CACJ,QADI,EAC6B;AAEjC,MAAI,IAAI,GAAY,QAApB;AAEA,MAAI,cAAc,CAAC,QAAD,CAAlB,EAA8B,IAAI,GAAG,QAAQ,CAAC,IAAhB;AAE9B,MAAI,uBAAuB,CAAC,IAAD,CAA3B,EAAmC,OAAO,aAAa,CAAI,IAAJ,CAApB;AAEnC,MAAI,gBAAgB,CAAC,IAAD,CAApB,EAA4B,OAAO,cAAc,CAAI,IAAI,CAAC,SAAL,EAAJ,CAArB;;AAI5B,MAAI,gBAAgB,CAAC,IAAD,CAApB,EAA4B;AAC1B,WAAO,cAAc,CAClB,IAAI,CAAC,MAAL,GAA+C,SAA/C,EADkB,CAArB;AAGD;;AAED,MAAI,MAAM,CAAC,IAAD,CAAV,EAAkB,OAAO,eAAe,CAAI,IAAI,CAAC,WAAL,EAAJ,CAAtB;AAElB,MAAI,oBAAoB,CAAC,IAAD,CAAxB,EAAgC,OAAO,kBAAkB,CAAI,IAAJ,CAAzB;AAEhC,QAAM,IAAI,KAAJ,CACJ,4EADI,CAAN;AAGD","sourcesContent":["/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/index.ts\n */\n\nimport { Response as NodeResponse } from \"node-fetch\";\nimport {\n  isAsyncIterableIterator,\n  isBlob,\n  isNodeResponse,\n  isNodeReadableStream,\n  isReadableStream,\n  isStreamableBlob,\n} from \"../../utilities/common/responseIterator\";\n\nimport asyncIterator from \"./iterators/async\";\nimport nodeStreamIterator from \"./iterators/nodeStream\";\nimport promiseIterator from \"./iterators/promise\";\nimport readerIterator from \"./iterators/reader\";\n\nexport function responseIterator<T>(\n  response: Response | NodeResponse\n): AsyncIterableIterator<T> {\n  let body: unknown = response;\n\n  if (isNodeResponse(response)) body = response.body;\n\n  if (isAsyncIterableIterator(body)) return asyncIterator<T>(body);\n\n  if (isReadableStream(body)) return readerIterator<T>(body.getReader());\n\n  // this errors without casting to ReadableStream<T>\n  // because Blob.stream() returns a NodeJS ReadableStream\n  if (isStreamableBlob(body)) {\n    return readerIterator<T>(\n      (body.stream() as unknown as ReadableStream<T>).getReader()\n    );\n  }\n\n  if (isBlob(body)) return promiseIterator<T>(body.arrayBuffer());\n\n  if (isNodeReadableStream(body)) return nodeStreamIterator<T>(body);\n\n  throw new Error(\n    \"Unknown body type for responseIterator. Please pass a streamable response.\"\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}