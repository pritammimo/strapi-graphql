{"ast":null,"code":"// This currentContext variable will only be used if the makeSlotClass\n// function is called, which happens only if this is the first copy of the\n// @wry/context package to be imported.\nlet currentContext = null; // This unique internal object is used to denote the absence of a value\n// for a given Slot, and is never exposed to outside code.\n\nconst MISSING_VALUE = {};\nlet idCounter = 1; // Although we can't do anything about the cost of duplicated code from\n// accidentally bundling multiple copies of the @wry/context package, we can\n// avoid creating the Slot class more than once using makeSlotClass.\n\nconst makeSlotClass = () => class Slot {\n  constructor() {\n    // If you have a Slot object, you can find out its slot.id, but you cannot\n    // guess the slot.id of a Slot you don't have access to, thanks to the\n    // randomized suffix.\n    this.id = [\"slot\", idCounter++, Date.now(), Math.random().toString(36).slice(2)].join(\":\");\n  }\n\n  hasValue() {\n    for (let context = currentContext; context; context = context.parent) {\n      // We use the Slot object iself as a key to its value, which means the\n      // value cannot be obtained without a reference to the Slot object.\n      if (this.id in context.slots) {\n        const value = context.slots[this.id];\n        if (value === MISSING_VALUE) break;\n\n        if (context !== currentContext) {\n          // Cache the value in currentContext.slots so the next lookup will\n          // be faster. This caching is safe because the tree of contexts and\n          // the values of the slots are logically immutable.\n          currentContext.slots[this.id] = value;\n        }\n\n        return true;\n      }\n    }\n\n    if (currentContext) {\n      // If a value was not found for this Slot, it's never going to be found\n      // no matter how many times we look it up, so we might as well cache\n      // the absence of the value, too.\n      currentContext.slots[this.id] = MISSING_VALUE;\n    }\n\n    return false;\n  }\n\n  getValue() {\n    if (this.hasValue()) {\n      return currentContext.slots[this.id];\n    }\n  }\n\n  withValue(value, callback, // Given the prevalence of arrow functions, specifying arguments is likely\n  // to be much more common than specifying `this`, hence this ordering:\n  args, thisArg) {\n    const slots = {\n      __proto__: null,\n      [this.id]: value\n    };\n    const parent = currentContext;\n    currentContext = {\n      parent,\n      slots\n    };\n\n    try {\n      // Function.prototype.apply allows the arguments array argument to be\n      // omitted or undefined, so args! is fine here.\n      return callback.apply(thisArg, args);\n    } finally {\n      currentContext = parent;\n    }\n  } // Capture the current context and wrap a callback function so that it\n  // reestablishes the captured context when called.\n\n\n  static bind(callback) {\n    const context = currentContext;\n    return function () {\n      const saved = currentContext;\n\n      try {\n        currentContext = context;\n        return callback.apply(this, arguments);\n      } finally {\n        currentContext = saved;\n      }\n    };\n  } // Immediately run a callback function without any captured context.\n\n\n  static noContext(callback, // Given the prevalence of arrow functions, specifying arguments is likely\n  // to be much more common than specifying `this`, hence this ordering:\n  args, thisArg) {\n    if (currentContext) {\n      const saved = currentContext;\n\n      try {\n        currentContext = null; // Function.prototype.apply allows the arguments array argument to be\n        // omitted or undefined, so args! is fine here.\n\n        return callback.apply(thisArg, args);\n      } finally {\n        currentContext = saved;\n      }\n    } else {\n      return callback.apply(thisArg, args);\n    }\n  }\n\n};\n\nfunction maybe(fn) {\n  try {\n    return fn();\n  } catch (ignored) {}\n} // We store a single global implementation of the Slot class as a permanent\n// non-enumerable property of the globalThis object. This obfuscation does\n// nothing to prevent access to the Slot class, but at least it ensures the\n// implementation (i.e. currentContext) cannot be tampered with, and all copies\n// of the @wry/context package (hopefully just one) will share the same Slot\n// implementation. Since the first copy of the @wry/context package to be\n// imported wins, this technique imposes a steep cost for any future breaking\n// changes to the Slot class.\n\n\nconst globalKey = \"@wry/context:Slot\";\nconst host = // Prefer globalThis when available.\n// https://github.com/benjamn/wryware/issues/347\nmaybe(() => globalThis) || // Fall back to global, which works in Node.js and may be converted by some\n// bundlers to the appropriate identifier (window, self, ...) depending on the\n// bundling target. https://github.com/endojs/endo/issues/576#issuecomment-1178515224\nmaybe(() => global) || // Otherwise, use a dummy host that's local to this module. We used to fall\n// back to using the Array constructor as a namespace, but that was flagged in\n// https://github.com/benjamn/wryware/issues/347, and can be avoided.\nObject.create(null); // Whichever globalHost we're using, make TypeScript happy about the additional\n// globalKey property.\n\nconst globalHost = host;\nexport const Slot = globalHost[globalKey] || // Earlier versions of this package stored the globalKey property on the Array\n// constructor, so we check there as well, to prevent Slot class duplication.\nArray[globalKey] || function (Slot) {\n  try {\n    Object.defineProperty(globalHost, globalKey, {\n      value: Slot,\n      enumerable: false,\n      writable: false,\n      // When it was possible for globalHost to be the Array constructor (a\n      // legacy Slot dedup strategy), it was important for the property to be\n      // configurable:true so it could be deleted. That does not seem to be as\n      // important when globalHost is the global object, but I don't want to\n      // cause similar problems again, and configurable:true seems safest.\n      // https://github.com/endojs/endo/issues/576#issuecomment-1178274008\n      configurable: true\n    });\n  } finally {\n    return Slot;\n  }\n}(makeSlotClass());","map":{"version":3,"sources":["../src/slot.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["// This currentContext variable will only be used if the makeSlotClass\n// function is called, which happens only if this is the first copy of the\n// @wry/context package to be imported.\nlet currentContext = null;\n// This unique internal object is used to denote the absence of a value\n// for a given Slot, and is never exposed to outside code.\nconst MISSING_VALUE = {};\nlet idCounter = 1;\n// Although we can't do anything about the cost of duplicated code from\n// accidentally bundling multiple copies of the @wry/context package, we can\n// avoid creating the Slot class more than once using makeSlotClass.\nconst makeSlotClass = () => class Slot {\n    constructor() {\n        // If you have a Slot object, you can find out its slot.id, but you cannot\n        // guess the slot.id of a Slot you don't have access to, thanks to the\n        // randomized suffix.\n        this.id = [\n            \"slot\",\n            idCounter++,\n            Date.now(),\n            Math.random().toString(36).slice(2),\n        ].join(\":\");\n    }\n    hasValue() {\n        for (let context = currentContext; context; context = context.parent) {\n            // We use the Slot object iself as a key to its value, which means the\n            // value cannot be obtained without a reference to the Slot object.\n            if (this.id in context.slots) {\n                const value = context.slots[this.id];\n                if (value === MISSING_VALUE)\n                    break;\n                if (context !== currentContext) {\n                    // Cache the value in currentContext.slots so the next lookup will\n                    // be faster. This caching is safe because the tree of contexts and\n                    // the values of the slots are logically immutable.\n                    currentContext.slots[this.id] = value;\n                }\n                return true;\n            }\n        }\n        if (currentContext) {\n            // If a value was not found for this Slot, it's never going to be found\n            // no matter how many times we look it up, so we might as well cache\n            // the absence of the value, too.\n            currentContext.slots[this.id] = MISSING_VALUE;\n        }\n        return false;\n    }\n    getValue() {\n        if (this.hasValue()) {\n            return currentContext.slots[this.id];\n        }\n    }\n    withValue(value, callback, \n    // Given the prevalence of arrow functions, specifying arguments is likely\n    // to be much more common than specifying `this`, hence this ordering:\n    args, thisArg) {\n        const slots = {\n            __proto__: null,\n            [this.id]: value,\n        };\n        const parent = currentContext;\n        currentContext = { parent, slots };\n        try {\n            // Function.prototype.apply allows the arguments array argument to be\n            // omitted or undefined, so args! is fine here.\n            return callback.apply(thisArg, args);\n        }\n        finally {\n            currentContext = parent;\n        }\n    }\n    // Capture the current context and wrap a callback function so that it\n    // reestablishes the captured context when called.\n    static bind(callback) {\n        const context = currentContext;\n        return function () {\n            const saved = currentContext;\n            try {\n                currentContext = context;\n                return callback.apply(this, arguments);\n            }\n            finally {\n                currentContext = saved;\n            }\n        };\n    }\n    // Immediately run a callback function without any captured context.\n    static noContext(callback, \n    // Given the prevalence of arrow functions, specifying arguments is likely\n    // to be much more common than specifying `this`, hence this ordering:\n    args, thisArg) {\n        if (currentContext) {\n            const saved = currentContext;\n            try {\n                currentContext = null;\n                // Function.prototype.apply allows the arguments array argument to be\n                // omitted or undefined, so args! is fine here.\n                return callback.apply(thisArg, args);\n            }\n            finally {\n                currentContext = saved;\n            }\n        }\n        else {\n            return callback.apply(thisArg, args);\n        }\n    }\n};\nfunction maybe(fn) {\n    try {\n        return fn();\n    }\n    catch (ignored) { }\n}\n// We store a single global implementation of the Slot class as a permanent\n// non-enumerable property of the globalThis object. This obfuscation does\n// nothing to prevent access to the Slot class, but at least it ensures the\n// implementation (i.e. currentContext) cannot be tampered with, and all copies\n// of the @wry/context package (hopefully just one) will share the same Slot\n// implementation. Since the first copy of the @wry/context package to be\n// imported wins, this technique imposes a steep cost for any future breaking\n// changes to the Slot class.\nconst globalKey = \"@wry/context:Slot\";\nconst host = \n// Prefer globalThis when available.\n// https://github.com/benjamn/wryware/issues/347\nmaybe(() => globalThis) ||\n    // Fall back to global, which works in Node.js and may be converted by some\n    // bundlers to the appropriate identifier (window, self, ...) depending on the\n    // bundling target. https://github.com/endojs/endo/issues/576#issuecomment-1178515224\n    maybe(() => global) ||\n    // Otherwise, use a dummy host that's local to this module. We used to fall\n    // back to using the Array constructor as a namespace, but that was flagged in\n    // https://github.com/benjamn/wryware/issues/347, and can be avoided.\n    Object.create(null);\n// Whichever globalHost we're using, make TypeScript happy about the additional\n// globalKey property.\nconst globalHost = host;\nexport const Slot = globalHost[globalKey] ||\n    // Earlier versions of this package stored the globalKey property on the Array\n    // constructor, so we check there as well, to prevent Slot class duplication.\n    Array[globalKey] ||\n    (function (Slot) {\n        try {\n            Object.defineProperty(globalHost, globalKey, {\n                value: Slot,\n                enumerable: false,\n                writable: false,\n                // When it was possible for globalHost to be the Array constructor (a\n                // legacy Slot dedup strategy), it was important for the property to be\n                // configurable:true so it could be deleted. That does not seem to be as\n                // important when globalHost is the global object, but I don't want to\n                // cause similar problems again, and configurable:true seems safest.\n                // https://github.com/endojs/endo/issues/576#issuecomment-1178274008\n                configurable: true\n            });\n        }\n        finally {\n            return Slot;\n        }\n    })(makeSlotClass());\n//# sourceMappingURL=slot.js.map"]},"metadata":{},"sourceType":"module"}