{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport \"../../utilities/globals/index.js\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { visit } from 'graphql';\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable, hasDirectives } from \"../../utilities/index.js\";\nimport { serializeFetchParameter } from \"./serializeFetchParameter.js\";\nimport { selectURI } from \"./selectURI.js\";\nimport { handleError, readMultipartBody, readJsonBody } from \"./parseAndCheckHttpResponse.js\";\nimport { checkFetcher } from \"./checkFetcher.js\";\nimport { selectHttpOptionsAndBodyInternal, defaultPrinter, fallbackHttpConfig } from \"./selectHttpOptionsAndBody.js\";\nimport { createSignalIfSupported } from \"./createSignalIfSupported.js\";\nimport { rewriteURIForGET } from \"./rewriteURIForGET.js\";\nimport { fromError } from \"../utils/index.js\";\nimport { maybe, getMainDefinition } from \"../../utilities/index.js\";\nvar backupFetch = maybe(function () {\n  return fetch;\n});\nexport var createHttpLink = function (linkOptions) {\n  if (linkOptions === void 0) {\n    linkOptions = {};\n  }\n\n  var _a = linkOptions.uri,\n      uri = _a === void 0 ? '/graphql' : _a,\n      preferredFetch = linkOptions.fetch,\n      _b = linkOptions.print,\n      print = _b === void 0 ? defaultPrinter : _b,\n      includeExtensions = linkOptions.includeExtensions,\n      preserveHeaderCase = linkOptions.preserveHeaderCase,\n      useGETForQueries = linkOptions.useGETForQueries,\n      _c = linkOptions.includeUnusedVariables,\n      includeUnusedVariables = _c === void 0 ? false : _c,\n      requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"print\", \"includeExtensions\", \"preserveHeaderCase\", \"useGETForQueries\", \"includeUnusedVariables\"]);\n\n  if (__DEV__) {\n    checkFetcher(preferredFetch || backupFetch);\n  }\n\n  var linkConfig = {\n    http: {\n      includeExtensions: includeExtensions,\n      preserveHeaderCase: preserveHeaderCase\n    },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers\n  };\n  return new ApolloLink(function (operation) {\n    var chosenURI = selectURI(operation, uri);\n    var context = operation.getContext();\n    var clientAwarenessHeaders = {};\n\n    if (context.clientAwareness) {\n      var _a = context.clientAwareness,\n          name_1 = _a.name,\n          version = _a.version;\n\n      if (name_1) {\n        clientAwarenessHeaders['apollographql-client-name'] = name_1;\n      }\n\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n\n    var contextHeaders = __assign(__assign({}, clientAwarenessHeaders), context.headers);\n\n    var contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders\n    };\n\n    var _b = selectHttpOptionsAndBodyInternal(operation, print, fallbackHttpConfig, linkConfig, contextConfig),\n        options = _b.options,\n        body = _b.body;\n\n    if (body.variables && !includeUnusedVariables) {\n      var unusedNames_1 = new Set(Object.keys(body.variables));\n      visit(operation.query, {\n        Variable: function (node, _key, parent) {\n          if (parent && parent.kind !== 'VariableDefinition') {\n            unusedNames_1.delete(node.name.value);\n          }\n        }\n      });\n\n      if (unusedNames_1.size) {\n        body.variables = __assign({}, body.variables);\n        unusedNames_1.forEach(function (name) {\n          delete body.variables[name];\n        });\n      }\n    }\n\n    var controller;\n\n    if (!options.signal) {\n      var _c = createSignalIfSupported(),\n          _controller = _c.controller,\n          signal = _c.signal;\n\n      controller = _controller;\n      if (controller) options.signal = signal;\n    }\n\n    var definitionIsMutation = function (d) {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n\n    var definitionIsSubscription = function (d) {\n      return d.kind === 'OperationDefinition' && d.operation === 'subscription';\n    };\n\n    var isSubscription = definitionIsSubscription(getMainDefinition(operation.query));\n    var hasDefer = hasDirectives(['defer'], operation.query);\n\n    if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {\n      options.method = 'GET';\n    }\n\n    if (hasDefer || isSubscription) {\n      options.headers = options.headers || {};\n      var acceptHeader = \"multipart/mixed;\";\n\n      if (isSubscription && hasDefer) {\n        __DEV__ && invariant.warn(\"Multipart-subscriptions do not support @defer\");\n      }\n\n      if (isSubscription) {\n        acceptHeader += 'boundary=graphql;subscriptionSpec=1.0,application/json';\n      } else if (hasDefer) {\n        acceptHeader += 'deferSpec=20220824,application/json';\n      }\n\n      options.headers.accept = acceptHeader;\n    }\n\n    if (options.method === 'GET') {\n      var _d = rewriteURIForGET(chosenURI, body),\n          newURI = _d.newURI,\n          parseError = _d.parseError;\n\n      if (parseError) {\n        return fromError(parseError);\n      }\n\n      chosenURI = newURI;\n    } else {\n      try {\n        options.body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable(function (observer) {\n      var currentFetch = preferredFetch || maybe(function () {\n        return fetch;\n      }) || backupFetch;\n      currentFetch(chosenURI, options).then(function (response) {\n        var _a;\n\n        operation.setContext({\n          response: response\n        });\n        var ctype = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get('content-type');\n\n        if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n          return readMultipartBody(response, observer);\n        } else {\n          return readJsonBody(response, operation, observer);\n        }\n      }).catch(function (err) {\n        return handleError(err, observer);\n      });\n      return function () {\n        if (controller) controller.abort();\n      };\n    });\n  });\n};","map":{"version":3,"sources":["../../../src/link/http/createHttpLink.ts"],"names":[],"mappings":"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","sourcesContent":["import '../../utilities/globals';\nimport { invariant } from '../../utilities/globals';\n\nimport { visit, DefinitionNode, VariableDefinitionNode } from 'graphql';\n\nimport { ApolloLink } from '../core';\nimport { Observable, hasDirectives } from '../../utilities';\nimport { serializeFetchParameter } from './serializeFetchParameter';\nimport { selectURI } from './selectURI';\nimport {\n  handleError,\n  readMultipartBody,\n  readJsonBody\n} from './parseAndCheckHttpResponse';\nimport { checkFetcher } from './checkFetcher';\nimport {\n  selectHttpOptionsAndBodyInternal,\n  defaultPrinter,\n  fallbackHttpConfig,\n  HttpOptions\n} from './selectHttpOptionsAndBody';\nimport { createSignalIfSupported } from './createSignalIfSupported';\nimport { rewriteURIForGET } from './rewriteURIForGET';\nimport { fromError } from '../utils';\nimport { maybe, getMainDefinition } from '../../utilities';\n\nconst backupFetch = maybe(() => fetch);\n\nexport const createHttpLink = (linkOptions: HttpOptions = {}) => {\n  let {\n    uri = '/graphql',\n    // use default global fetch if nothing passed in\n    fetch: preferredFetch,\n    print = defaultPrinter,\n    includeExtensions,\n    preserveHeaderCase,\n    useGETForQueries,\n    includeUnusedVariables = false,\n    ...requestOptions\n  } = linkOptions;\n\n  if (__DEV__) {\n    // Make sure at least one of preferredFetch, window.fetch, or backupFetch is\n    // defined, so requests won't fail at runtime.\n    checkFetcher(preferredFetch || backupFetch);\n  }\n\n  const linkConfig = {\n    http: { includeExtensions, preserveHeaderCase },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers,\n  };\n\n  return new ApolloLink(operation => {\n    let chosenURI = selectURI(operation, uri);\n\n    const context = operation.getContext();\n\n    // `apollographql-client-*` headers are automatically set if a\n    // `clientAwareness` object is found in the context. These headers are\n    // set first, followed by the rest of the headers pulled from\n    // `context.headers`. If desired, `apollographql-client-*` headers set by\n    // the `clientAwareness` object can be overridden by\n    // `apollographql-client-*` headers set in `context.headers`.\n    const clientAwarenessHeaders: {\n      'apollographql-client-name'?: string;\n      'apollographql-client-version'?: string;\n    } = {};\n\n    if (context.clientAwareness) {\n      const { name, version } = context.clientAwareness;\n      if (name) {\n        clientAwarenessHeaders['apollographql-client-name'] = name;\n      }\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n\n    const contextHeaders = { ...clientAwarenessHeaders, ...context.headers };\n\n    const contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders,\n    };\n\n    //uses fallback, link, and then context to build options\n    const { options, body } = selectHttpOptionsAndBodyInternal(\n      operation,\n      print,\n      fallbackHttpConfig,\n      linkConfig,\n      contextConfig,\n    );\n\n    if (body.variables && !includeUnusedVariables) {\n      const unusedNames = new Set(Object.keys(body.variables));\n      visit(operation.query, {\n        Variable(node, _key, parent) {\n          // A variable type definition at the top level of a query is not\n          // enough to silence server-side errors about the variable being\n          // unused, so variable definitions do not count as usage.\n          // https://spec.graphql.org/draft/#sec-All-Variables-Used\n          if (parent && (parent as VariableDefinitionNode).kind !== 'VariableDefinition') {\n            unusedNames.delete(node.name.value);\n          }\n        },\n      });\n      if (unusedNames.size) {\n        // Make a shallow copy of body.variables (with keys in the same\n        // order) and then delete unused variables from the copy.\n        body.variables = { ...body.variables };\n        unusedNames.forEach(name => {\n          delete body.variables![name];\n        });\n      }\n    }\n\n    let controller: any;\n    if (!(options as any).signal) {\n      const { controller: _controller, signal } = createSignalIfSupported();\n      controller = _controller;\n      if (controller) (options as any).signal = signal;\n    }\n\n    // If requested, set method to GET if there are no mutations.\n    const definitionIsMutation = (d: DefinitionNode) => {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n    const definitionIsSubscription = (d: DefinitionNode) => {\n      return d.kind === 'OperationDefinition' && d.operation === 'subscription';\n    };\n    const isSubscription = definitionIsSubscription(getMainDefinition(operation.query));\n    // does not match custom directives beginning with @defer\n    const hasDefer = hasDirectives(['defer'], operation.query);\n    if (\n      useGETForQueries &&\n      !operation.query.definitions.some(definitionIsMutation)\n    ) {\n      options.method = 'GET';\n    }\n\n    if (hasDefer || isSubscription) {\n      options.headers = options.headers || {};\n      let acceptHeader = \"multipart/mixed;\";\n      // Omit defer-specific headers if the user attempts to defer a selection\n      // set on a subscription and log a warning.\n      if (isSubscription && hasDefer) {\n        invariant.warn(\"Multipart-subscriptions do not support @defer\");\n      }\n\n      if (isSubscription) {\n        acceptHeader += 'boundary=graphql;subscriptionSpec=1.0,application/json';\n      } else if (hasDefer) {\n        acceptHeader += 'deferSpec=20220824,application/json';\n      }\n      options.headers.accept = acceptHeader;\n    }\n\n    if (options.method === 'GET') {\n      const { newURI, parseError } = rewriteURIForGET(chosenURI, body);\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        (options as any).body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable(observer => {\n      // Prefer linkOptions.fetch (preferredFetch) if provided, and otherwise\n      // fall back to the *current* global window.fetch function (see issue\n      // #7832), or (if all else fails) the backupFetch function we saved when\n      // this module was first evaluated. This last option protects against the\n      // removal of window.fetch, which is unlikely but not impossible.\n      const currentFetch = preferredFetch || maybe(() => fetch) || backupFetch;\n\n      currentFetch!(chosenURI, options)\n        .then(response => {\n          operation.setContext({ response });\n          const ctype = response.headers?.get('content-type');\n\n          if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n            return readMultipartBody(response, observer);\n          } else {\n            return readJsonBody(response, operation, observer);\n          }\n        })\n        .catch(err => handleError(err, observer));\n\n      return () => {\n        // XXX support canceling this request\n        // https://developers.google.com/web/updates/2017/09/abortable-fetch\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}