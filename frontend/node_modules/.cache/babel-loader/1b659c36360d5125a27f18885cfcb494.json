{"ast":null,"code":"import { __extends, __spreadArray } from \"tslib\";\nimport \"../utilities/globals/index.js\";\nimport { isNonNullObject } from \"../utilities/index.js\";\nexport var PROTOCOL_ERRORS_SYMBOL = Symbol();\nexport function graphQLResultHasProtocolErrors(result) {\n  if (result.extensions) {\n    return Array.isArray(result.extensions[PROTOCOL_ERRORS_SYMBOL]);\n  }\n\n  return false;\n}\nexport function isApolloError(err) {\n  return err.hasOwnProperty('graphQLErrors');\n}\n\nvar generateErrorMessage = function (err) {\n  var errors = __spreadArray(__spreadArray(__spreadArray([], err.graphQLErrors, true), err.clientErrors, true), err.protocolErrors, true);\n\n  if (err.networkError) errors.push(err.networkError);\n  return errors.map(function (err) {\n    return isNonNullObject(err) && err.message || 'Error message not found.';\n  }).join('\\n');\n};\n\nvar ApolloError = function (_super) {\n  __extends(ApolloError, _super);\n\n  function ApolloError(_a) {\n    var graphQLErrors = _a.graphQLErrors,\n        protocolErrors = _a.protocolErrors,\n        clientErrors = _a.clientErrors,\n        networkError = _a.networkError,\n        errorMessage = _a.errorMessage,\n        extraInfo = _a.extraInfo;\n\n    var _this = _super.call(this, errorMessage) || this;\n\n    _this.name = 'ApolloError';\n    _this.graphQLErrors = graphQLErrors || [];\n    _this.protocolErrors = protocolErrors || [];\n    _this.clientErrors = clientErrors || [];\n    _this.networkError = networkError || null;\n    _this.message = errorMessage || generateErrorMessage(_this);\n    _this.extraInfo = extraInfo;\n    _this.__proto__ = ApolloError.prototype;\n    return _this;\n  }\n\n  return ApolloError;\n}(Error);\n\nexport { ApolloError };","map":{"version":3,"sources":["../../src/errors/index.ts"],"names":[],"mappings":";AAAA,OAAO,+BAAP;AAIA,SAAS,eAAT,QAAgC,uBAAhC;AAQA,OAAO,IAAM,sBAAsB,GAAkB,MAAM,EAApD;AAkBP,OAAM,SAAU,8BAAV,CACJ,MADI,EACkB;AAEtB,MAAI,MAAM,CAAC,UAAX,EAAuB;AACrB,WAAO,KAAK,CAAC,OAAN,CACJ,MAA6C,CAAC,UAA9C,CACC,sBADD,CADI,CAAP;AAKD;;AACD,SAAO,KAAP;AACD;AAGD,OAAM,SAAU,aAAV,CAAwB,GAAxB,EAAkC;AACtC,SAAO,GAAG,CAAC,cAAJ,CAAmB,eAAnB,CAAP;AACD;;AAMD,IAAM,oBAAoB,GAAG,UAAC,GAAD,EAAiB;AAC5C,MAAM,MAAM,GAAA,aAAA,CAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EACP,GAAG,CAAC,aADG,EACU,IADV,CAAA,EAEP,GAAG,CAAC,YAFG,EAES,IAFT,CAAA,EAGP,GAAG,CAAC,cAHG,EAGW,IAHX,CAAZ;;AAKA,MAAI,GAAG,CAAC,YAAR,EAAsB,MAAM,CAAC,IAAP,CAAY,GAAG,CAAC,YAAhB;AACtB,SAAO,MAAM,CAEV,GAFI,CAEA,UAAA,GAAA,EAAG;AAAI,WAAA,eAAe,CAAC,GAAD,CAAf,IAAwB,GAAG,CAAC,OAA5B,IAAA,0BAAA;AAAiE,GAFxE,EAGJ,IAHI,CAGC,IAHD,CAAP;AAID,CAXD;;AAiBA,IAAA,WAAA,GAAA,UAAA,MAAA,EAAA;AAAiC,EAAA,SAAA,CAAA,WAAA,EAAA,MAAA,CAAA;;AAmB/B,WAAA,WAAA,CAAY,EAAZ,EAOqB;QANnB,aAAa,GAAA,EAAA,CAAA,a;QACb,cAAc,GAAA,EAAA,CAAA,c;QACd,YAAY,GAAA,EAAA,CAAA,Y;QACZ,YAAY,GAAA,EAAA,CAAA,Y;QACZ,YAAY,GAAA,EAAA,CAAA,Y;QACZ,SAAS,GAAA,EAAA,CAAA,S;;AANX,QAAA,KAAA,GAQE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,YAAN,KAAmB,IARrB;;AASE,IAAA,KAAI,CAAC,IAAL,GAAY,aAAZ;AACA,IAAA,KAAI,CAAC,aAAL,GAAqB,aAAa,IAAI,EAAtC;AACA,IAAA,KAAI,CAAC,cAAL,GAAsB,cAAc,IAAI,EAAxC;AACA,IAAA,KAAI,CAAC,YAAL,GAAoB,YAAY,IAAI,EAApC;AACA,IAAA,KAAI,CAAC,YAAL,GAAoB,YAAY,IAAI,IAApC;AACA,IAAA,KAAI,CAAC,OAAL,GAAe,YAAY,IAAI,oBAAoB,CAAC,KAAD,CAAnD;AACA,IAAA,KAAI,CAAC,SAAL,GAAiB,SAAjB;AAIC,IAAA,KAAY,CAAC,SAAb,GAAyB,WAAW,CAAC,SAArC;;AACF;;AACH,SAAA,WAAA;AAAC,CAxCD,CAAiC,KAAjC,CAAA","sourcesContent":["import '../utilities/globals';\n\nimport { GraphQLError, GraphQLErrorExtensions } from 'graphql';\n\nimport { isNonNullObject } from '../utilities';\nimport { ServerParseError } from '../link/http';\nimport { ServerError } from '../link/utils';\nimport { FetchResult } from \"../link/core\";\n\n// This Symbol allows us to pass transport-specific errors from the link chain\n// into QueryManager/client internals without risking a naming collision within\n// extensions (which implementers can use as they see fit).\nexport const PROTOCOL_ERRORS_SYMBOL: unique symbol = Symbol();\n\ntype FetchResultWithSymbolExtensions<T> = FetchResult<T> & {\n  extensions: Record<string | symbol, any>\n};\n\nexport interface ApolloErrorOptions {\n  graphQLErrors?: ReadonlyArray<GraphQLError>;\n  protocolErrors?: ReadonlyArray<{\n    message: string;\n    extensions?: GraphQLErrorExtensions[];\n  }>;\n  clientErrors?: ReadonlyArray<Error>;\n  networkError?: Error | ServerParseError | ServerError | null;\n  errorMessage?: string;\n  extraInfo?: any;\n}\n\nexport function graphQLResultHasProtocolErrors<T>(\n  result: FetchResult<T>\n): result is FetchResultWithSymbolExtensions<T> {\n  if (result.extensions) {\n    return Array.isArray(\n      (result as FetchResultWithSymbolExtensions<T>).extensions[\n        PROTOCOL_ERRORS_SYMBOL\n      ]\n    );\n  }\n  return false;\n}\n\n\nexport function isApolloError(err: Error): err is ApolloError {\n  return err.hasOwnProperty('graphQLErrors');\n}\n\n// Sets the error message on this error according to the\n// the GraphQL and network errors that are present.\n// If the error message has already been set through the\n// constructor or otherwise, this function is a nop.\nconst generateErrorMessage = (err: ApolloError) => {\n  const errors = [\n    ...err.graphQLErrors,\n    ...err.clientErrors,\n    ...err.protocolErrors\n  ];\n  if (err.networkError) errors.push(err.networkError);\n  return errors\n    // The rest of the code sometimes unsafely types non-Error objects as GraphQLErrors\n    .map(err => isNonNullObject(err) && err.message || 'Error message not found.')\n    .join('\\n');\n};\n\nexport type GraphQLErrors = ReadonlyArray<GraphQLError>;\n\nexport type NetworkError = Error | ServerParseError | ServerError | null;\n\nexport class ApolloError extends Error {\n  public name: string;\n  public message: string;\n  public graphQLErrors: GraphQLErrors;\n  public protocolErrors: ReadonlyArray<{\n    message: string;\n    extensions?: GraphQLErrorExtensions[];\n  }>;\n  public clientErrors: ReadonlyArray<Error>;\n  public networkError: Error | ServerParseError | ServerError | null;\n\n  // An object that can be used to provide some additional information\n  // about an error, e.g. specifying the type of error this is. Used\n  // internally within Apollo Client.\n  public extraInfo: any;\n\n  // Constructs an instance of ApolloError given a GraphQLError\n  // or a network error. Note that one of these has to be a valid\n  // value or the constructed error will be meaningless.\n  constructor({\n    graphQLErrors,\n    protocolErrors,\n    clientErrors,\n    networkError,\n    errorMessage,\n    extraInfo,\n  }: ApolloErrorOptions) {\n    super(errorMessage);\n    this.name = 'ApolloError';\n    this.graphQLErrors = graphQLErrors || [];\n    this.protocolErrors = protocolErrors || [];\n    this.clientErrors = clientErrors || [];\n    this.networkError = networkError || null;\n    this.message = errorMessage || generateErrorMessage(this);\n    this.extraInfo = extraInfo;\n\n    // We're not using `Object.setPrototypeOf` here as it isn't fully\n    // supported on Android (see issue #3236).\n    (this as any).__proto__ = ApolloError.prototype;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}