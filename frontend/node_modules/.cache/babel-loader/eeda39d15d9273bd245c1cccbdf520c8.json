{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { invariant } from \"../globals/index.js\";\nimport { visit, Kind } from 'graphql';\nimport { checkDocument, getOperationDefinition, getFragmentDefinition, getFragmentDefinitions, getMainDefinition } from \"./getFromAST.js\";\nimport { isField } from \"./storeUtils.js\";\nimport { createFragmentMap } from \"./fragments.js\";\nimport { isArray } from \"../common/arrays.js\";\nvar TYPENAME_FIELD = {\n  kind: Kind.FIELD,\n  name: {\n    kind: Kind.NAME,\n    value: '__typename'\n  }\n};\n\nfunction isEmpty(op, fragmentMap) {\n  return !op || op.selectionSet.selections.every(function (selection) {\n    return selection.kind === Kind.FRAGMENT_SPREAD && isEmpty(fragmentMap[selection.name.value], fragmentMap);\n  });\n}\n\nfunction nullIfDocIsEmpty(doc) {\n  return isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc))) ? null : doc;\n}\n\nfunction getDirectiveMatcher(directives) {\n  var nameSet = new Set();\n  var tests = [];\n  directives.forEach(function (directive) {\n    if (directive.name) {\n      nameSet.add(directive.name);\n    } else if (directive.test) {\n      tests.push(directive.test);\n    }\n  });\n  return function (directive) {\n    return nameSet.has(directive.name.value) || tests.some(function (test) {\n      return test(directive);\n    });\n  };\n}\n\nfunction makeInUseGetterFunction(defaultKey) {\n  var map = new Map();\n  return function inUseGetterFunction(key) {\n    if (key === void 0) {\n      key = defaultKey;\n    }\n\n    var inUse = map.get(key);\n\n    if (!inUse) {\n      map.set(key, inUse = {\n        variables: new Set(),\n        fragmentSpreads: new Set()\n      });\n    }\n\n    return inUse;\n  };\n}\n\nexport function removeDirectivesFromDocument(directives, doc) {\n  var getInUseByOperationName = makeInUseGetterFunction(\"\");\n  var getInUseByFragmentName = makeInUseGetterFunction(\"\");\n\n  var getInUse = function (ancestors) {\n    for (var p = 0, ancestor = void 0; p < ancestors.length && (ancestor = ancestors[p]); ++p) {\n      if (isArray(ancestor)) continue;\n\n      if (ancestor.kind === Kind.OPERATION_DEFINITION) {\n        return getInUseByOperationName(ancestor.name && ancestor.name.value);\n      }\n\n      if (ancestor.kind === Kind.FRAGMENT_DEFINITION) {\n        return getInUseByFragmentName(ancestor.name.value);\n      }\n    }\n\n    __DEV__ && invariant.error(\"Could not find operation or fragment\");\n    return null;\n  };\n\n  var operationCount = 0;\n\n  for (var i = doc.definitions.length - 1; i >= 0; --i) {\n    if (doc.definitions[i].kind === Kind.OPERATION_DEFINITION) {\n      ++operationCount;\n    }\n  }\n\n  var directiveMatcher = getDirectiveMatcher(directives);\n  var hasRemoveDirective = directives.some(function (directive) {\n    return directive.remove;\n  });\n\n  var shouldRemoveField = function (nodeDirectives) {\n    return hasRemoveDirective && nodeDirectives && nodeDirectives.some(directiveMatcher);\n  };\n\n  var originalFragmentDefsByPath = new Map();\n  var firstVisitMadeChanges = false;\n  var fieldOrInlineFragmentVisitor = {\n    enter: function (node) {\n      if (shouldRemoveField(node.directives)) {\n        firstVisitMadeChanges = true;\n        return null;\n      }\n    }\n  };\n  var docWithoutDirectiveSubtrees = visit(doc, {\n    Field: fieldOrInlineFragmentVisitor,\n    InlineFragment: fieldOrInlineFragmentVisitor,\n    VariableDefinition: {\n      enter: function () {\n        return false;\n      }\n    },\n    Variable: {\n      enter: function (node, _key, _parent, _path, ancestors) {\n        var inUse = getInUse(ancestors);\n\n        if (inUse) {\n          inUse.variables.add(node.name.value);\n        }\n      }\n    },\n    FragmentSpread: {\n      enter: function (node, _key, _parent, _path, ancestors) {\n        if (shouldRemoveField(node.directives)) {\n          firstVisitMadeChanges = true;\n          return null;\n        }\n\n        var inUse = getInUse(ancestors);\n\n        if (inUse) {\n          inUse.fragmentSpreads.add(node.name.value);\n        }\n      }\n    },\n    FragmentDefinition: {\n      enter: function (node, _key, _parent, path) {\n        originalFragmentDefsByPath.set(JSON.stringify(path), node);\n      },\n      leave: function (node, _key, _parent, path) {\n        var originalNode = originalFragmentDefsByPath.get(JSON.stringify(path));\n\n        if (node === originalNode) {\n          return node;\n        }\n\n        if (operationCount > 0 && node.selectionSet.selections.every(function (selection) {\n          return selection.kind === Kind.FIELD && selection.name.value === '__typename';\n        })) {\n          getInUseByFragmentName(node.name.value).removed = true;\n          firstVisitMadeChanges = true;\n          return null;\n        }\n      }\n    },\n    Directive: {\n      leave: function (node) {\n        if (directiveMatcher(node)) {\n          firstVisitMadeChanges = true;\n          return null;\n        }\n      }\n    }\n  });\n\n  if (!firstVisitMadeChanges) {\n    return doc;\n  }\n\n  var populateTransitiveVars = function (inUse) {\n    if (!inUse.transitiveVars) {\n      inUse.transitiveVars = new Set(inUse.variables);\n\n      if (!inUse.removed) {\n        inUse.fragmentSpreads.forEach(function (childFragmentName) {\n          populateTransitiveVars(getInUseByFragmentName(childFragmentName)).transitiveVars.forEach(function (varName) {\n            inUse.transitiveVars.add(varName);\n          });\n        });\n      }\n    }\n\n    return inUse;\n  };\n\n  var allFragmentNamesUsed = new Set();\n  docWithoutDirectiveSubtrees.definitions.forEach(function (def) {\n    if (def.kind === Kind.OPERATION_DEFINITION) {\n      populateTransitiveVars(getInUseByOperationName(def.name && def.name.value)).fragmentSpreads.forEach(function (childFragmentName) {\n        allFragmentNamesUsed.add(childFragmentName);\n      });\n    } else if (def.kind === Kind.FRAGMENT_DEFINITION && operationCount === 0 && !getInUseByFragmentName(def.name.value).removed) {\n      allFragmentNamesUsed.add(def.name.value);\n    }\n  });\n  allFragmentNamesUsed.forEach(function (fragmentName) {\n    populateTransitiveVars(getInUseByFragmentName(fragmentName)).fragmentSpreads.forEach(function (childFragmentName) {\n      allFragmentNamesUsed.add(childFragmentName);\n    });\n  });\n\n  var fragmentWillBeRemoved = function (fragmentName) {\n    return !!(!allFragmentNamesUsed.has(fragmentName) || getInUseByFragmentName(fragmentName).removed);\n  };\n\n  var enterVisitor = {\n    enter: function (node) {\n      if (fragmentWillBeRemoved(node.name.value)) {\n        return null;\n      }\n    }\n  };\n  return nullIfDocIsEmpty(visit(docWithoutDirectiveSubtrees, {\n    FragmentSpread: enterVisitor,\n    FragmentDefinition: enterVisitor,\n    OperationDefinition: {\n      leave: function (node) {\n        if (node.variableDefinitions) {\n          var usedVariableNames_1 = populateTransitiveVars(getInUseByOperationName(node.name && node.name.value)).transitiveVars;\n\n          if (usedVariableNames_1.size < node.variableDefinitions.length) {\n            return __assign(__assign({}, node), {\n              variableDefinitions: node.variableDefinitions.filter(function (varDef) {\n                return usedVariableNames_1.has(varDef.variable.name.value);\n              })\n            });\n          }\n        }\n      }\n    }\n  }));\n}\nexport var addTypenameToDocument = Object.assign(function (doc) {\n  return visit(doc, {\n    SelectionSet: {\n      enter: function (node, _key, parent) {\n        if (parent && parent.kind === Kind.OPERATION_DEFINITION) {\n          return;\n        }\n\n        var selections = node.selections;\n\n        if (!selections) {\n          return;\n        }\n\n        var skip = selections.some(function (selection) {\n          return isField(selection) && (selection.name.value === '__typename' || selection.name.value.lastIndexOf('__', 0) === 0);\n        });\n\n        if (skip) {\n          return;\n        }\n\n        var field = parent;\n\n        if (isField(field) && field.directives && field.directives.some(function (d) {\n          return d.name.value === 'export';\n        })) {\n          return;\n        }\n\n        return __assign(__assign({}, node), {\n          selections: __spreadArray(__spreadArray([], selections, true), [TYPENAME_FIELD], false)\n        });\n      }\n    }\n  });\n}, {\n  added: function (field) {\n    return field === TYPENAME_FIELD;\n  }\n});\nvar connectionRemoveConfig = {\n  test: function (directive) {\n    var willRemove = directive.name.value === 'connection';\n\n    if (willRemove) {\n      if (!directive.arguments || !directive.arguments.some(function (arg) {\n        return arg.name.value === 'key';\n      })) {\n        __DEV__ && invariant.warn('Removing an @connection directive even though it does not have a key. ' + 'You may want to use the key parameter to specify a store key.');\n      }\n    }\n\n    return willRemove;\n  }\n};\nexport function removeConnectionDirectiveFromDocument(doc) {\n  return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));\n}\n\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n  if (nestedCheck === void 0) {\n    nestedCheck = true;\n  }\n\n  return !!selectionSet && selectionSet.selections && selectionSet.selections.some(function (selection) {\n    return hasDirectivesInSelection(directives, selection, nestedCheck);\n  });\n}\n\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n  if (nestedCheck === void 0) {\n    nestedCheck = true;\n  }\n\n  if (!isField(selection)) {\n    return true;\n  }\n\n  if (!selection.directives) {\n    return false;\n  }\n\n  return selection.directives.some(getDirectiveMatcher(directives)) || nestedCheck && hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck);\n}\n\nfunction getArgumentMatcher(config) {\n  return function argumentMatcher(argument) {\n    return config.some(function (aConfig) {\n      return argument.value && argument.value.kind === Kind.VARIABLE && argument.value.name && (aConfig.name === argument.value.name.value || aConfig.test && aConfig.test(argument));\n    });\n  };\n}\n\nexport function removeArgumentsFromDocument(config, doc) {\n  var argMatcher = getArgumentMatcher(config);\n  return nullIfDocIsEmpty(visit(doc, {\n    OperationDefinition: {\n      enter: function (node) {\n        return __assign(__assign({}, node), {\n          variableDefinitions: node.variableDefinitions ? node.variableDefinitions.filter(function (varDef) {\n            return !config.some(function (arg) {\n              return arg.name === varDef.variable.name.value;\n            });\n          }) : []\n        });\n      }\n    },\n    Field: {\n      enter: function (node) {\n        var shouldRemoveField = config.some(function (argConfig) {\n          return argConfig.remove;\n        });\n\n        if (shouldRemoveField) {\n          var argMatchCount_1 = 0;\n\n          if (node.arguments) {\n            node.arguments.forEach(function (arg) {\n              if (argMatcher(arg)) {\n                argMatchCount_1 += 1;\n              }\n            });\n          }\n\n          if (argMatchCount_1 === 1) {\n            return null;\n          }\n        }\n      }\n    },\n    Argument: {\n      enter: function (node) {\n        if (argMatcher(node)) {\n          return null;\n        }\n      }\n    }\n  }));\n}\nexport function removeFragmentSpreadFromDocument(config, doc) {\n  function enter(node) {\n    if (config.some(function (def) {\n      return def.name === node.name.value;\n    })) {\n      return null;\n    }\n  }\n\n  return nullIfDocIsEmpty(visit(doc, {\n    FragmentSpread: {\n      enter: enter\n    },\n    FragmentDefinition: {\n      enter: enter\n    }\n  }));\n}\nexport function buildQueryFromSelectionSet(document) {\n  var definition = getMainDefinition(document);\n  var definitionOperation = definition.operation;\n\n  if (definitionOperation === 'query') {\n    return document;\n  }\n\n  var modifiedDoc = visit(document, {\n    OperationDefinition: {\n      enter: function (node) {\n        return __assign(__assign({}, node), {\n          operation: 'query'\n        });\n      }\n    }\n  });\n  return modifiedDoc;\n}\nexport function removeClientSetsFromDocument(document) {\n  checkDocument(document);\n  var modifiedDoc = removeDirectivesFromDocument([{\n    test: function (directive) {\n      return directive.name.value === 'client';\n    },\n    remove: true\n  }], document);\n  return modifiedDoc;\n}","map":{"version":3,"sources":["../../../src/utilities/graphql/transform.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant } from '../globals';\n\nimport {\n  DocumentNode,\n  SelectionNode,\n  SelectionSetNode,\n  OperationDefinitionNode,\n  FieldNode,\n  DirectiveNode,\n  FragmentDefinitionNode,\n  ArgumentNode,\n  FragmentSpreadNode,\n  VariableDefinitionNode,\n  visit,\n  ASTNode,\n  Kind,\n  ASTVisitor,\n  InlineFragmentNode,\n} from 'graphql';\n\nimport {\n  checkDocument,\n  getOperationDefinition,\n  getFragmentDefinition,\n  getFragmentDefinitions,\n  getMainDefinition,\n} from './getFromAST';\nimport { isField } from './storeUtils';\nimport {\n  createFragmentMap,\n  FragmentMap,\n} from './fragments';\nimport { isArray } from '../common/arrays';\n\nexport type RemoveNodeConfig<N> = {\n  name?: string;\n  test?: (node: N) => boolean;\n  remove?: boolean;\n};\n\nexport type GetNodeConfig<N> = {\n  name?: string;\n  test?: (node: N) => boolean;\n};\n\nexport type RemoveDirectiveConfig = RemoveNodeConfig<DirectiveNode>;\nexport type GetDirectiveConfig = GetNodeConfig<DirectiveNode>;\nexport type RemoveArgumentsConfig = RemoveNodeConfig<ArgumentNode>;\nexport type GetFragmentSpreadConfig = GetNodeConfig<FragmentSpreadNode>;\nexport type RemoveFragmentSpreadConfig = RemoveNodeConfig<FragmentSpreadNode>;\nexport type RemoveFragmentDefinitionConfig = RemoveNodeConfig<\n  FragmentDefinitionNode\n>;\nexport type RemoveVariableDefinitionConfig = RemoveNodeConfig<\n  VariableDefinitionNode\n>;\n\nconst TYPENAME_FIELD: FieldNode = {\n  kind: Kind.FIELD,\n  name: {\n    kind: Kind.NAME,\n    value: '__typename',\n  },\n};\n\nfunction isEmpty(\n  op: OperationDefinitionNode | FragmentDefinitionNode,\n  fragmentMap: FragmentMap,\n): boolean {\n  return !op || op.selectionSet.selections.every(\n    selection => selection.kind === Kind.FRAGMENT_SPREAD &&\n      isEmpty(fragmentMap[selection.name.value], fragmentMap)\n  );\n}\n\nfunction nullIfDocIsEmpty(doc: DocumentNode) {\n  return isEmpty(\n    getOperationDefinition(doc) || getFragmentDefinition(doc),\n    createFragmentMap(getFragmentDefinitions(doc)),\n  )\n    ? null\n    : doc;\n}\n\nfunction getDirectiveMatcher(\n  directives: (RemoveDirectiveConfig | GetDirectiveConfig)[],\n) {\n  const nameSet = new Set<string>();\n  const tests: Array<(directive: DirectiveNode) => boolean> = [];\n  directives.forEach(directive => {\n    if (directive.name) {\n      nameSet.add(directive.name);\n    } else if (directive.test) {\n      tests.push(directive.test);\n    }\n  });\n\n  return (directive: DirectiveNode) => (\n    nameSet.has(directive.name.value) ||\n    tests.some(test => test(directive))\n  );\n}\n\n// Helper interface and function used by removeDirectivesFromDocument to keep\n// track of variable references and fragments spreads found within a given\n// operation or fragment definition.\ninterface InternalInUseInfo {\n  variables: Set<string>;\n  fragmentSpreads: Set<string>;\n  // Set to true when we deliberately remove a fragment definition, so we can\n  // make sure also to remove dangling ...spreads that refer to it.\n  removed?: boolean;\n  // Populated by the populateTransitiveVars helper function below.\n  transitiveVars?: Set<string>;\n}\nfunction makeInUseGetterFunction<TKey>(defaultKey: TKey) {\n  const map = new Map<TKey, InternalInUseInfo>();\n\n  return function inUseGetterFunction(\n    key: TKey = defaultKey\n  ): InternalInUseInfo {\n    let inUse = map.get(key);\n    if (!inUse) {\n      map.set(key, inUse = {\n        // Variable and fragment spread names used directly within this\n        // operation or fragment definition, as identified by key. These sets\n        // will be populated during the first traversal of the document in\n        // removeDirectivesFromDocument below.\n        variables: new Set,\n        fragmentSpreads: new Set,\n      });\n    }\n    return inUse;\n  };\n}\n\nexport function removeDirectivesFromDocument(\n  directives: RemoveDirectiveConfig[],\n  doc: DocumentNode,\n): DocumentNode | null {\n  // Passing empty strings to makeInUseGetterFunction means we handle anonymous\n  // operations as if their names were \"\". Anonymous fragment definitions are\n  // not supposed to be possible, but the same default naming strategy seems\n  // appropriate for that case as well.\n  const getInUseByOperationName = makeInUseGetterFunction<string>(\"\");\n  const getInUseByFragmentName = makeInUseGetterFunction<string>(\"\");\n  const getInUse = (\n    ancestors: readonly (ASTNode | readonly ASTNode[])[],\n  ): InternalInUseInfo | null => {\n    for (\n      let p = 0, ancestor: ASTNode | readonly ASTNode[];\n      p < ancestors.length && (ancestor = ancestors[p]);\n      ++p\n    ) {\n      if (isArray(ancestor)) continue;\n      if (ancestor.kind === Kind.OPERATION_DEFINITION) {\n        // If an operation is anonymous, we use the empty string as its key.\n        return getInUseByOperationName(ancestor.name && ancestor.name.value);\n      }\n      if (ancestor.kind === Kind.FRAGMENT_DEFINITION) {\n        return getInUseByFragmentName(ancestor.name.value);\n      }\n    }\n    invariant.error(`Could not find operation or fragment`);\n    return null;\n  };\n\n  let operationCount = 0;\n  for (let i = doc.definitions.length - 1; i >= 0; --i) {\n    if (doc.definitions[i].kind === Kind.OPERATION_DEFINITION) {\n      ++operationCount;\n    }\n  }\n\n  const directiveMatcher = getDirectiveMatcher(directives);\n  const hasRemoveDirective = directives.some(directive => directive.remove);\n  const shouldRemoveField = (\n    nodeDirectives: FieldNode[\"directives\"]\n  ) => (\n    hasRemoveDirective &&\n    nodeDirectives &&\n    nodeDirectives.some(directiveMatcher)\n  );\n\n  const originalFragmentDefsByPath = new Map<string, FragmentDefinitionNode>();\n\n  // Any time the first traversal of the document below makes a change like\n  // removing a fragment (by returning null), this variable should be set to\n  // true. Once it becomes true, it should never be set to false again. If this\n  // variable remains false throughout the traversal, then we can return the\n  // original doc immediately without any modifications.\n  let firstVisitMadeChanges = false;\n\n  const fieldOrInlineFragmentVisitor: ASTVisitor = {\n    enter(node: FieldNode | InlineFragmentNode) {\n      if (shouldRemoveField(node.directives)) {\n        firstVisitMadeChanges = true;\n        return null;\n      }\n    },\n  };\n\n  const docWithoutDirectiveSubtrees = visit(doc, {\n    // These two AST node types share the same implementation, defined above.\n    Field: fieldOrInlineFragmentVisitor,\n    InlineFragment: fieldOrInlineFragmentVisitor,\n\n    VariableDefinition: {\n      enter() {\n        // VariableDefinition nodes do not count as variables in use, though\n        // they do contain Variable nodes that might be visited below. To avoid\n        // counting variable declarations as usages, we skip visiting the\n        // contents of this VariableDefinition node by returning false.\n        return false;\n      },\n    },\n\n    Variable: {\n      enter(node, _key, _parent, _path, ancestors) {\n        const inUse = getInUse(ancestors);\n        if (inUse) {\n          inUse.variables.add(node.name.value);\n        }\n      },\n    },\n\n    FragmentSpread: {\n      enter(node, _key, _parent, _path, ancestors) {\n        if (shouldRemoveField(node.directives)) {\n          firstVisitMadeChanges = true;\n          return null;\n        }\n        const inUse = getInUse(ancestors);\n        if (inUse) {\n          inUse.fragmentSpreads.add(node.name.value);\n        }\n        // We might like to remove this FragmentSpread by returning null here if\n        // the corresponding FragmentDefinition node is also going to be removed\n        // by the logic below, but we can't control the relative order of those\n        // events, so we have to postpone the removal of dangling FragmentSpread\n        // nodes until after the current visit of the document has finished.\n      },\n    },\n\n    FragmentDefinition: {\n      enter(node, _key, _parent, path) {\n        originalFragmentDefsByPath.set(JSON.stringify(path), node);\n      },\n      leave(node, _key, _parent, path) {\n        const originalNode = originalFragmentDefsByPath.get(JSON.stringify(path));\n        if (node === originalNode) {\n          // If the FragmentNode received by this leave function is identical to\n          // the one received by the corresponding enter function (above), then\n          // the visitor must not have made any changes within this\n          // FragmentDefinition node. This fragment definition may still be\n          // removed if there are no ...spread references to it, but it won't be\n          // removed just because it has only a __typename field.\n          return node;\n        }\n\n        if (\n          // This logic applies only if the document contains one or more\n          // operations, since removing all fragments from a document containing\n          // only fragments makes the document useless.\n          operationCount > 0 &&\n          node.selectionSet.selections.every(selection => (\n            selection.kind === Kind.FIELD &&\n            selection.name.value === '__typename'\n          ))\n        ) {\n          // This is a somewhat opinionated choice: if a FragmentDefinition ends\n          // up having no fields other than __typename, we remove the whole\n          // fragment definition, and later prune ...spread references to it.\n          getInUseByFragmentName(node.name.value).removed = true;\n          firstVisitMadeChanges = true;\n          return null;\n        }\n      },\n    },\n\n    Directive: {\n      leave(node) {\n        // If a matching directive is found, remove the directive itself. Note\n        // that this does not remove the target (field, argument, etc) of the\n        // directive, but only the directive itself.\n        if (directiveMatcher(node)) {\n          firstVisitMadeChanges = true;\n          return null;\n        }\n      },\n    },\n  });\n\n  if (!firstVisitMadeChanges) {\n    // If our first pass did not change anything about the document, then there\n    // is no cleanup we need to do, and we can return the original doc.\n    return doc;\n  }\n\n  // Utility for making sure inUse.transitiveVars is recursively populated.\n  // Because this logic assumes inUse.fragmentSpreads has been completely\n  // populated and inUse.removed has been set if appropriate,\n  // populateTransitiveVars must be called after that information has been\n  // collected by the first traversal of the document.\n  const populateTransitiveVars = (\n    inUse: InternalInUseInfo,\n  ) => {\n    if (!inUse.transitiveVars) {\n      inUse.transitiveVars = new Set(inUse.variables);\n      if (!inUse.removed) {\n        inUse.fragmentSpreads.forEach(childFragmentName => {\n          populateTransitiveVars(\n            getInUseByFragmentName(childFragmentName)\n          ).transitiveVars!.forEach(varName => {\n            inUse.transitiveVars!.add(varName);\n          });\n        });\n      }\n    }\n    return inUse;\n  };\n\n  // Since we've been keeping track of fragment spreads used by particular\n  // operations and fragment definitions, we now need to compute the set of all\n  // spreads used (transitively) by any operations in the document.\n  const allFragmentNamesUsed = new Set<string>();\n  docWithoutDirectiveSubtrees.definitions.forEach(def => {\n    if (def.kind === Kind.OPERATION_DEFINITION) {\n      populateTransitiveVars(\n        getInUseByOperationName(def.name && def.name.value)\n      ).fragmentSpreads.forEach(childFragmentName => {\n        allFragmentNamesUsed.add(childFragmentName);\n      });\n    } else if (\n      def.kind === Kind.FRAGMENT_DEFINITION &&\n      // If there are no operations in the document, then all fragment\n      // definitions count as usages of their own fragment names. This heuristic\n      // prevents accidentally removing all fragment definitions from the\n      // document just because it contains no operations that use the fragments.\n      operationCount === 0 &&\n      !getInUseByFragmentName(def.name.value).removed\n    ) {\n      allFragmentNamesUsed.add(def.name.value);\n    }\n  });\n  // Now that we have added all fragment spreads used by operations to the\n  // allFragmentNamesUsed set, we can complete the set by transitively adding\n  // all fragment spreads used by those fragments, and so on.\n  allFragmentNamesUsed.forEach(fragmentName => {\n    // Once all the childFragmentName strings added here have been seen already,\n    // the top-level allFragmentNamesUsed.forEach loop will terminate.\n    populateTransitiveVars(\n      getInUseByFragmentName(fragmentName)\n    ).fragmentSpreads.forEach(childFragmentName => {\n      allFragmentNamesUsed.add(childFragmentName);\n    });\n  });\n\n  const fragmentWillBeRemoved = (\n    fragmentName: string,\n  ) => !!(\n    // A fragment definition will be removed if there are no spreads that refer\n    // to it, or the fragment was explicitly removed because it had no fields\n    // other than __typename.\n    !allFragmentNamesUsed.has(fragmentName) ||\n    getInUseByFragmentName(fragmentName).removed\n  );\n\n  const enterVisitor: ASTVisitor = {\n    enter(node: FragmentSpreadNode | FragmentDefinitionNode) {\n      if (fragmentWillBeRemoved(node.name.value)) {\n        return null;\n      }\n    },\n  };\n\n  return nullIfDocIsEmpty(visit(docWithoutDirectiveSubtrees, {\n    // If the fragment is going to be removed, then leaving any dangling\n    // FragmentSpread nodes with the same name would be a mistake.\n    FragmentSpread: enterVisitor,\n\n    // This is where the fragment definition is actually removed.\n    FragmentDefinition: enterVisitor,\n\n    OperationDefinition: {\n      leave(node) {\n        // Upon leaving each operation in the depth-first AST traversal, prune\n        // any variables that are declared by the operation but unused within.\n        if (node.variableDefinitions) {\n          const usedVariableNames = populateTransitiveVars(\n            // If an operation is anonymous, we use the empty string as its key.\n            getInUseByOperationName(node.name && node.name.value)\n          ).transitiveVars!;\n\n          // According to the GraphQL spec, all variables declared by an\n          // operation must either be used by that operation or used by some\n          // fragment included transitively into that operation:\n          // https://spec.graphql.org/draft/#sec-All-Variables-Used\n          //\n          // To stay on the right side of this validation rule, if/when we\n          // remove the last $var references from an operation or its fragments,\n          // we must also remove the corresponding $var declaration from the\n          // enclosing operation. This pruning applies only to operations and\n          // not fragment definitions, at the moment. Fragments may be able to\n          // declare variables eventually, but today they can only consume them.\n          if (usedVariableNames.size < node.variableDefinitions.length) {\n            return {\n              ...node,\n              variableDefinitions: node.variableDefinitions.filter(\n                varDef => usedVariableNames.has(varDef.variable.name.value),\n              ),\n            };\n          }\n        }\n      },\n    },\n  }));\n}\n\nexport const addTypenameToDocument = Object.assign(function <\n  TNode extends ASTNode\n>(\n  doc: TNode\n): TNode {\n  return visit(doc, {\n    SelectionSet: {\n      enter(node, _key, parent) {\n        // Don't add __typename to OperationDefinitions.\n        if (\n          parent &&\n          (parent as OperationDefinitionNode).kind === Kind.OPERATION_DEFINITION\n        ) {\n          return;\n        }\n\n        // No changes if no selections.\n        const { selections } = node;\n        if (!selections) {\n          return;\n        }\n\n        // If selections already have a __typename, or are part of an\n        // introspection query, do nothing.\n        const skip = selections.some(selection => {\n          return (\n            isField(selection) &&\n            (selection.name.value === '__typename' ||\n              selection.name.value.lastIndexOf('__', 0) === 0)\n          );\n        });\n        if (skip) {\n          return;\n        }\n\n        // If this SelectionSet is @export-ed as an input variable, it should\n        // not have a __typename field (see issue #4691).\n        const field = parent as FieldNode;\n        if (\n          isField(field) &&\n          field.directives &&\n          field.directives.some(d => d.name.value === 'export')\n        ) {\n          return;\n        }\n\n        // Create and return a new SelectionSet with a __typename Field.\n        return {\n          ...node,\n          selections: [...selections, TYPENAME_FIELD],\n        };\n      },\n    },\n  });\n}, {\n  added(field: FieldNode): boolean {\n    return field === TYPENAME_FIELD;\n  },\n});\n\nconst connectionRemoveConfig = {\n  test: (directive: DirectiveNode) => {\n    const willRemove = directive.name.value === 'connection';\n    if (willRemove) {\n      if (\n        !directive.arguments ||\n        !directive.arguments.some(arg => arg.name.value === 'key')\n      ) {\n        invariant.warn(\n          'Removing an @connection directive even though it does not have a key. ' +\n            'You may want to use the key parameter to specify a store key.',\n        );\n      }\n    }\n\n    return willRemove;\n  },\n};\n\nexport function removeConnectionDirectiveFromDocument(doc: DocumentNode) {\n  return removeDirectivesFromDocument(\n    [connectionRemoveConfig],\n    checkDocument(doc),\n  );\n}\n\nfunction hasDirectivesInSelectionSet(\n  directives: GetDirectiveConfig[],\n  selectionSet: SelectionSetNode | undefined,\n  nestedCheck = true,\n): boolean {\n  return (\n    !!selectionSet &&\n    selectionSet.selections &&\n    selectionSet.selections.some(selection =>\n      hasDirectivesInSelection(directives, selection, nestedCheck),\n    )\n  );\n}\n\nfunction hasDirectivesInSelection(\n  directives: GetDirectiveConfig[],\n  selection: SelectionNode,\n  nestedCheck = true,\n): boolean {\n  if (!isField(selection)) {\n    return true;\n  }\n\n  if (!selection.directives) {\n    return false;\n  }\n\n  return (\n    selection.directives.some(getDirectiveMatcher(directives)) ||\n    (nestedCheck &&\n      hasDirectivesInSelectionSet(\n        directives,\n        selection.selectionSet,\n        nestedCheck,\n      ))\n  );\n}\n\nfunction getArgumentMatcher(config: RemoveArgumentsConfig[]) {\n  return function argumentMatcher(argument: ArgumentNode) {\n    return config.some(\n      (aConfig: RemoveArgumentsConfig) =>\n        argument.value &&\n        argument.value.kind === Kind.VARIABLE &&\n        argument.value.name &&\n        (aConfig.name === argument.value.name.value ||\n          (aConfig.test && aConfig.test(argument))),\n    );\n  };\n}\n\nexport function removeArgumentsFromDocument(\n  config: RemoveArgumentsConfig[],\n  doc: DocumentNode,\n): DocumentNode | null {\n  const argMatcher = getArgumentMatcher(config);\n\n  return nullIfDocIsEmpty(\n    visit(doc, {\n      OperationDefinition: {\n        enter(node) {\n          return {\n            ...node,\n            // Remove matching top level variables definitions.\n            variableDefinitions: node.variableDefinitions ? node.variableDefinitions.filter(\n              varDef =>\n                !config.some(arg => arg.name === varDef.variable.name.value),\n            ) : [],\n          };\n        },\n      },\n\n      Field: {\n        enter(node) {\n          // If `remove` is set to true for an argument, and an argument match\n          // is found for a field, remove the field as well.\n          const shouldRemoveField = config.some(argConfig => argConfig.remove);\n\n          if (shouldRemoveField) {\n            let argMatchCount = 0;\n            if (node.arguments) {\n              node.arguments.forEach(arg => {\n                if (argMatcher(arg)) {\n                  argMatchCount += 1;\n                }\n              });\n            }\n\n            if (argMatchCount === 1) {\n              return null;\n            }\n          }\n        },\n      },\n\n      Argument: {\n        enter(node) {\n          // Remove all matching arguments.\n          if (argMatcher(node)) {\n            return null;\n          }\n        },\n      },\n    }),\n  );\n}\n\nexport function removeFragmentSpreadFromDocument(\n  config: RemoveFragmentSpreadConfig[],\n  doc: DocumentNode,\n): DocumentNode | null {\n  function enter(\n    node: FragmentSpreadNode | FragmentDefinitionNode,\n  ): null | void {\n    if (config.some(def => def.name === node.name.value)) {\n      return null;\n    }\n  }\n\n  return nullIfDocIsEmpty(\n    visit(doc, {\n      FragmentSpread: { enter },\n      FragmentDefinition: { enter },\n    }),\n  );\n}\n\n// If the incoming document is a query, return it as is. Otherwise, build a\n// new document containing a query operation based on the selection set\n// of the previous main operation.\nexport function buildQueryFromSelectionSet(\n  document: DocumentNode,\n): DocumentNode {\n  const definition = getMainDefinition(document);\n  const definitionOperation = (<OperationDefinitionNode>definition).operation;\n\n  if (definitionOperation === 'query') {\n    // Already a query, so return the existing document.\n    return document;\n  }\n\n  // Build a new query using the selection set of the main operation.\n  const modifiedDoc = visit(document, {\n    OperationDefinition: {\n      enter(node) {\n        return {\n          ...node,\n          operation: 'query',\n        };\n      },\n    },\n  });\n  return modifiedDoc;\n}\n\n// Remove fields / selection sets that include an @client directive.\nexport function removeClientSetsFromDocument(\n  document: DocumentNode,\n): DocumentNode | null {\n  checkDocument(document);\n\n  let modifiedDoc = removeDirectivesFromDocument(\n    [\n      {\n        test: (directive: DirectiveNode) => directive.name.value === 'client',\n        remove: true,\n      },\n    ],\n    document,\n  );\n\n  return modifiedDoc;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}