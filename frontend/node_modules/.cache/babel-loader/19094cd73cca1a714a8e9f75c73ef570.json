{"ast":null,"code":"import \"../../utilities/globals/index.js\";\nimport { useState, useRef, useEffect } from 'react';\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nexport function useSubscription(subscription, options) {\n  var hasIssuedDeprecationWarningRef = useRef(false);\n  var client = useApolloClient(options === null || options === void 0 ? void 0 : options.client);\n  verifyDocumentType(subscription, DocumentType.Subscription);\n\n  var _a = useState({\n    loading: !(options === null || options === void 0 ? void 0 : options.skip),\n    error: void 0,\n    data: void 0,\n    variables: options === null || options === void 0 ? void 0 : options.variables\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  if (!hasIssuedDeprecationWarningRef.current) {\n    hasIssuedDeprecationWarningRef.current = true;\n\n    if (options === null || options === void 0 ? void 0 : options.onSubscriptionData) {\n      __DEV__ && invariant.warn(options.onData ? \"'useSubscription' supports only the 'onSubscriptionData' or 'onData' option, but not both. Only the 'onData' option will be used.\" : \"'onSubscriptionData' is deprecated and will be removed in a future major version. Please use the 'onData' option instead.\");\n    }\n\n    if (options === null || options === void 0 ? void 0 : options.onSubscriptionComplete) {\n      __DEV__ && invariant.warn(options.onComplete ? \"'useSubscription' supports only the 'onSubscriptionComplete' or 'onComplete' option, but not both. Only the 'onComplete' option will be used.\" : \"'onSubscriptionComplete' is deprecated and will be removed in a future major version. Please use the 'onComplete' option instead.\");\n    }\n  }\n\n  var _b = useState(function () {\n    if (options === null || options === void 0 ? void 0 : options.skip) {\n      return null;\n    }\n\n    return client.subscribe({\n      query: subscription,\n      variables: options === null || options === void 0 ? void 0 : options.variables,\n      fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,\n      context: options === null || options === void 0 ? void 0 : options.context\n    });\n  }),\n      observable = _b[0],\n      setObservable = _b[1];\n\n  var canResetObservableRef = useRef(false);\n  useEffect(function () {\n    return function () {\n      canResetObservableRef.current = true;\n    };\n  }, []);\n  var ref = useRef({\n    client: client,\n    subscription: subscription,\n    options: options\n  });\n  useEffect(function () {\n    var _a, _b, _c, _d;\n\n    var shouldResubscribe = options === null || options === void 0 ? void 0 : options.shouldResubscribe;\n\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(options);\n    }\n\n    if (options === null || options === void 0 ? void 0 : options.skip) {\n      if (!(options === null || options === void 0 ? void 0 : options.skip) !== !((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.skip) || canResetObservableRef.current) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error: void 0,\n          variables: options === null || options === void 0 ? void 0 : options.variables\n        });\n        setObservable(null);\n        canResetObservableRef.current = false;\n      }\n    } else if (shouldResubscribe !== false && (client !== ref.current.client || subscription !== ref.current.subscription || (options === null || options === void 0 ? void 0 : options.fetchPolicy) !== ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || !(options === null || options === void 0 ? void 0 : options.skip) !== !((_c = ref.current.options) === null || _c === void 0 ? void 0 : _c.skip) || !equal(options === null || options === void 0 ? void 0 : options.variables, (_d = ref.current.options) === null || _d === void 0 ? void 0 : _d.variables)) || canResetObservableRef.current) {\n      setResult({\n        loading: true,\n        data: void 0,\n        error: void 0,\n        variables: options === null || options === void 0 ? void 0 : options.variables\n      });\n      setObservable(client.subscribe({\n        query: subscription,\n        variables: options === null || options === void 0 ? void 0 : options.variables,\n        fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,\n        context: options === null || options === void 0 ? void 0 : options.context\n      }));\n      canResetObservableRef.current = false;\n    }\n\n    Object.assign(ref.current, {\n      client: client,\n      subscription: subscription,\n      options: options\n    });\n  }, [client, subscription, options, canResetObservableRef.current]);\n  useEffect(function () {\n    if (!observable) {\n      return;\n    }\n\n    var subscriptionStopped = false;\n    var subscription = observable.subscribe({\n      next: function (fetchResult) {\n        var _a, _b;\n\n        if (subscriptionStopped) {\n          return;\n        }\n\n        var result = {\n          loading: false,\n          data: fetchResult.data,\n          error: void 0,\n          variables: options === null || options === void 0 ? void 0 : options.variables\n        };\n        setResult(result);\n\n        if ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onData) {\n          ref.current.options.onData({\n            client: client,\n            data: result\n          });\n        } else if ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onSubscriptionData) {\n          ref.current.options.onSubscriptionData({\n            client: client,\n            subscriptionData: result\n          });\n        }\n      },\n      error: function (error) {\n        var _a, _b;\n\n        if (!subscriptionStopped) {\n          setResult({\n            loading: false,\n            data: void 0,\n            error: error,\n            variables: options === null || options === void 0 ? void 0 : options.variables\n          });\n          (_b = (_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError) === null || _b === void 0 ? void 0 : _b.call(_a, error);\n        }\n\n        ;\n      },\n      complete: function () {\n        var _a, _b;\n\n        if (!subscriptionStopped) {\n          if ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onComplete) {\n            ref.current.options.onComplete();\n          } else if ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onSubscriptionComplete) {\n            ref.current.options.onSubscriptionComplete();\n          }\n        }\n      }\n    });\n    return function () {\n      subscriptionStopped = true;\n      setTimeout(function () {\n        subscription.unsubscribe();\n      });\n    };\n  }, [observable]);\n  return result;\n}","map":{"version":3,"sources":["../../../src/react/hooks/useSubscription.ts"],"names":[],"mappings":"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","sourcesContent":["import '../../utilities/globals';\nimport { useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { invariant } from '../../utilities/globals'\nimport { equal } from '@wry/equality';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport {\n  SubscriptionHookOptions,\n  SubscriptionResult\n} from '../types/types';\nimport { OperationVariables } from '../../core';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useSubscription<TData = any, TVariables extends OperationVariables = OperationVariables>(\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SubscriptionHookOptions<TData, TVariables>,\n) {\n  const hasIssuedDeprecationWarningRef = useRef(false);\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(subscription, DocumentType.Subscription);\n  const [result, setResult] = useState<SubscriptionResult<TData>>({\n    loading: !options?.skip,\n    error: void 0,\n    data: void 0,\n    variables: options?.variables,\n  });\n\n  if (!hasIssuedDeprecationWarningRef.current) {\n    hasIssuedDeprecationWarningRef.current = true;\n\n    if (options?.onSubscriptionData) {\n      invariant.warn(\n        options.onData\n          ? \"'useSubscription' supports only the 'onSubscriptionData' or 'onData' option, but not both. Only the 'onData' option will be used.\"\n          : \"'onSubscriptionData' is deprecated and will be removed in a future major version. Please use the 'onData' option instead.\"\n      );\n    }\n\n    if (options?.onSubscriptionComplete) {\n      invariant.warn(\n        options.onComplete\n          ? \"'useSubscription' supports only the 'onSubscriptionComplete' or 'onComplete' option, but not both. Only the 'onComplete' option will be used.\"\n          : \"'onSubscriptionComplete' is deprecated and will be removed in a future major version. Please use the 'onComplete' option instead.\"\n      );\n    }\n  }\n\n  const [observable, setObservable] = useState(() => {\n    if (options?.skip) {\n      return null;\n    }\n\n    return client.subscribe({\n      query: subscription,\n      variables: options?.variables,\n      fetchPolicy: options?.fetchPolicy,\n      context: options?.context,\n    });\n  });\n\n  const canResetObservableRef = useRef(false);\n  useEffect(() => {\n    return () => {\n      canResetObservableRef.current = true;\n    };\n  }, []);\n\n  const ref = useRef({ client, subscription, options });\n  useEffect(() => {\n    let shouldResubscribe = options?.shouldResubscribe;\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(options!);\n    }\n\n    if (options?.skip) {\n      if (!options?.skip !== !ref.current.options?.skip || canResetObservableRef.current) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error: void 0,\n          variables: options?.variables,\n        });\n        setObservable(null);\n        canResetObservableRef.current = false;\n      }\n    } else if (\n      (shouldResubscribe !== false &&\n        (client !== ref.current.client ||\n          subscription !== ref.current.subscription ||\n          options?.fetchPolicy !== ref.current.options?.fetchPolicy ||\n          !options?.skip !== !ref.current.options?.skip ||\n          !equal(options?.variables, ref.current.options?.variables))) ||\n      canResetObservableRef.current\n    ) {\n      setResult({\n        loading: true,\n        data: void 0,\n        error: void 0,\n        variables: options?.variables,\n      });\n      setObservable(client.subscribe({\n        query: subscription,\n        variables: options?.variables,\n        fetchPolicy: options?.fetchPolicy,\n        context: options?.context,\n      }));\n      canResetObservableRef.current = false;\n    }\n\n    Object.assign(ref.current, { client, subscription, options });\n  }, [client, subscription, options, canResetObservableRef.current]);\n\n  useEffect(() => {\n    if (!observable) {\n      return;\n    }\n\n    let subscriptionStopped = false;\n    const subscription = observable.subscribe({\n      next(fetchResult) {\n        if (subscriptionStopped) {\n          return;\n        }\n\n        const result = {\n          loading: false,\n          // TODO: fetchResult.data can be null but SubscriptionResult.data\n          // expects TData | undefined only\n          data: fetchResult.data!,\n          error: void 0,\n          variables: options?.variables,\n        };\n        setResult(result);\n\n        if (ref.current.options?.onData) {\n          ref.current.options.onData({\n            client,\n            data: result\n          });\n        } else if (ref.current.options?.onSubscriptionData) {\n          ref.current.options.onSubscriptionData({\n            client,\n            subscriptionData: result\n          });\n        }\n      },\n      error(error) {\n        if (!subscriptionStopped) {\n          setResult({\n            loading: false,\n            data: void 0,\n            error,\n            variables: options?.variables,\n          });\n          ref.current.options?.onError?.(error);\n        };\n      },\n      complete() {\n        if (!subscriptionStopped) {\n          if (ref.current.options?.onComplete) {\n            ref.current.options.onComplete();\n          } else if (ref.current.options?.onSubscriptionComplete) {\n            ref.current.options.onSubscriptionComplete();\n          }\n        }\n      },\n    });\n\n    return () => {\n      // immediately stop receiving subscription values, but do not unsubscribe\n      // until after a short delay in case another useSubscription hook is\n      // reusing the same underlying observable and is about to subscribe\n      subscriptionStopped = true;\n      setTimeout(() => {\n        subscription.unsubscribe();\n      });\n    };\n  }, [observable]);\n\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}