{"ast":null,"code":"import { canUseAsyncIteratorSymbol } from \"../../../utilities/index.js\";\nexport default function promiseIterator(promise) {\n  var resolved = false;\n  var iterator = {\n    next: function () {\n      if (resolved) return Promise.resolve({\n        value: undefined,\n        done: true\n      });\n      resolved = true;\n      return new Promise(function (resolve, reject) {\n        promise.then(function (value) {\n          resolve({\n            value: value,\n            done: false\n          });\n        }).catch(reject);\n      });\n    }\n  };\n\n  if (canUseAsyncIteratorSymbol) {\n    iterator[Symbol.asyncIterator] = function () {\n      return this;\n    };\n  }\n\n  return iterator;\n}","map":{"version":3,"sources":["../../../../src/link/http/iterators/promise.ts"],"names":[],"mappings":"AAKA,SAAS,yBAAT,QAA0C,6BAA1C;AAOA,eAAc,SAAU,eAAV,CACZ,OADY,EACiB;AAE7B,MAAI,QAAQ,GAAG,KAAf;AAEA,MAAM,QAAQ,GAAuB;AACnC,IAAA,IAAI,EAAA,YAAA;AACF,UAAI,QAAJ,EACE,OAAO,OAAO,CAAC,OAAR,CAAgB;AACrB,QAAA,KAAK,EAAE,SADc;AAErB,QAAA,IAAI,EAAE;AAFe,OAAhB,CAAP;AAIF,MAAA,QAAQ,GAAG,IAAX;AACA,aAAO,IAAI,OAAJ,CAAY,UAAU,OAAV,EAAmB,MAAnB,EAAyB;AAC1C,QAAA,OAAO,CACJ,IADH,CACQ,UAAU,KAAV,EAAe;AACnB,UAAA,OAAO,CAAC;AAAE,YAAA,KAAK,EAAE,KAAT;AAAgC,YAAA,IAAI,EAAE;AAAtC,WAAD,CAAP;AACD,SAHH,EAIG,KAJH,CAIS,MAJT;AAKD,OANM,CAAP;AAOD;AAfkC,GAArC;;AAkBA,MAAI,yBAAJ,EAA+B;AAC7B,IAAA,QAAQ,CAAC,MAAM,CAAC,aAAR,CAAR,GAAiC,YAAA;AAC/B,aAAO,IAAP;AACD,KAFD;AAGD;;AAED,SAAO,QAAP;AACD","sourcesContent":["/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/promise.ts\n */\n\nimport { canUseAsyncIteratorSymbol } from \"../../../utilities\";\n\ninterface PromiseIterator<T> {\n  next(): Promise<IteratorResult<T, ArrayBuffer | undefined>>;\n  [Symbol.asyncIterator]?(): AsyncIterator<T>;\n}\n\nexport default function promiseIterator<T = ArrayBuffer>(\n  promise: Promise<ArrayBuffer>\n): AsyncIterableIterator<T> {\n  let resolved = false;\n\n  const iterator: PromiseIterator<T> = {\n    next(): Promise<IteratorResult<T, ArrayBuffer | undefined>> {\n      if (resolved)\n        return Promise.resolve({\n          value: undefined,\n          done: true,\n        });\n      resolved = true;\n      return new Promise(function (resolve, reject) {\n        promise\n          .then(function (value) {\n            resolve({ value: value as unknown as T, done: false });\n          })\n          .catch(reject);\n      });\n    },\n  };\n\n  if (canUseAsyncIteratorSymbol) {\n    iterator[Symbol.asyncIterator] = function (): AsyncIterator<T> {\n      return this;\n    };\n  }\n\n  return iterator as AsyncIterableIterator<T>;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}